
demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ca4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000000  20000000  20000000  00011ca4  2**0
                  CONTENTS
  2 .bss          000002b4  20000000  20000000  00020000  2**2
                  ALLOC
  3 .stack        00002004  200002b4  200002b4  00020000  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00011ca4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00011ccc  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002e2dd  00000000  00000000  00011d25  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000306a  00000000  00000000  00040002  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0001228b  00000000  00000000  0004306c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000cf0  00000000  00000000  000552f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001460  00000000  00000000  00055fe7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00019709  00000000  00000000  00057447  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000f53d  00000000  00000000  00070b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008d25e  00000000  00000000  0008008d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000226c  00000000  00000000  0010d2ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	b8 22 00 20 25 01 00 00 21 01 00 00 21 01 00 00     .". %...!...!...
	...
      2c:	21 01 00 00 00 00 00 00 00 00 00 00 21 01 00 00     !...........!...
      3c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      4c:	19 0c 00 00 21 01 00 00 21 01 00 00 21 01 00 00     ....!...!...!...
      5c:	f5 18 00 00 21 01 00 00 21 01 00 00 21 01 00 00     ....!...!...!...
      6c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      7c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      8c:	21 01 00 00 21 01 00 00 00 00 00 00 00 00 00 00     !...!...........
      9c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      ac:	21 01 00 00 00 00 00 00                             !.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000000 	.word	0x20000000
      d4:	00000000 	.word	0x00000000
      d8:	00001ca4 	.word	0x00001ca4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000004 	.word	0x20000004
     108:	00001ca4 	.word	0x00001ca4
     10c:	00001ca4 	.word	0x00001ca4
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b01      	ldr	r3, [pc, #4]	; (11c <atmel_start_init+0x8>)
     118:	4798      	blx	r3
}
     11a:	bd10      	pop	{r4, pc}
     11c:	000003a5 	.word	0x000003a5

00000120 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     120:	e7fe      	b.n	120 <Dummy_Handler>
	...

00000124 <Reset_Handler>:
{
     124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     126:	4a2a      	ldr	r2, [pc, #168]	; (1d0 <Reset_Handler+0xac>)
     128:	4b2a      	ldr	r3, [pc, #168]	; (1d4 <Reset_Handler+0xb0>)
     12a:	429a      	cmp	r2, r3
     12c:	d011      	beq.n	152 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     12e:	001a      	movs	r2, r3
     130:	4b29      	ldr	r3, [pc, #164]	; (1d8 <Reset_Handler+0xb4>)
     132:	429a      	cmp	r2, r3
     134:	d20d      	bcs.n	152 <Reset_Handler+0x2e>
     136:	4a29      	ldr	r2, [pc, #164]	; (1dc <Reset_Handler+0xb8>)
     138:	3303      	adds	r3, #3
     13a:	1a9b      	subs	r3, r3, r2
     13c:	089b      	lsrs	r3, r3, #2
     13e:	3301      	adds	r3, #1
     140:	009b      	lsls	r3, r3, #2
     142:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     144:	4823      	ldr	r0, [pc, #140]	; (1d4 <Reset_Handler+0xb0>)
     146:	4922      	ldr	r1, [pc, #136]	; (1d0 <Reset_Handler+0xac>)
     148:	588c      	ldr	r4, [r1, r2]
     14a:	5084      	str	r4, [r0, r2]
     14c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     14e:	429a      	cmp	r2, r3
     150:	d1fa      	bne.n	148 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     152:	4a23      	ldr	r2, [pc, #140]	; (1e0 <Reset_Handler+0xbc>)
     154:	4b23      	ldr	r3, [pc, #140]	; (1e4 <Reset_Handler+0xc0>)
     156:	429a      	cmp	r2, r3
     158:	d20a      	bcs.n	170 <Reset_Handler+0x4c>
     15a:	43d3      	mvns	r3, r2
     15c:	4921      	ldr	r1, [pc, #132]	; (1e4 <Reset_Handler+0xc0>)
     15e:	185b      	adds	r3, r3, r1
     160:	2103      	movs	r1, #3
     162:	438b      	bics	r3, r1
     164:	3304      	adds	r3, #4
     166:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     168:	2100      	movs	r1, #0
     16a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     16c:	4293      	cmp	r3, r2
     16e:	d1fc      	bne.n	16a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     170:	4a1d      	ldr	r2, [pc, #116]	; (1e8 <Reset_Handler+0xc4>)
     172:	21ff      	movs	r1, #255	; 0xff
     174:	4b1d      	ldr	r3, [pc, #116]	; (1ec <Reset_Handler+0xc8>)
     176:	438b      	bics	r3, r1
     178:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     17a:	39fd      	subs	r1, #253	; 0xfd
     17c:	2390      	movs	r3, #144	; 0x90
     17e:	005b      	lsls	r3, r3, #1
     180:	4a1b      	ldr	r2, [pc, #108]	; (1f0 <Reset_Handler+0xcc>)
     182:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     184:	4a1b      	ldr	r2, [pc, #108]	; (1f4 <Reset_Handler+0xd0>)
     186:	78d3      	ldrb	r3, [r2, #3]
     188:	2503      	movs	r5, #3
     18a:	43ab      	bics	r3, r5
     18c:	2402      	movs	r4, #2
     18e:	4323      	orrs	r3, r4
     190:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     192:	78d3      	ldrb	r3, [r2, #3]
     194:	270c      	movs	r7, #12
     196:	43bb      	bics	r3, r7
     198:	2608      	movs	r6, #8
     19a:	4333      	orrs	r3, r6
     19c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     19e:	4b16      	ldr	r3, [pc, #88]	; (1f8 <Reset_Handler+0xd4>)
     1a0:	7b98      	ldrb	r0, [r3, #14]
     1a2:	2230      	movs	r2, #48	; 0x30
     1a4:	4390      	bics	r0, r2
     1a6:	2220      	movs	r2, #32
     1a8:	4310      	orrs	r0, r2
     1aa:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1ac:	7b99      	ldrb	r1, [r3, #14]
     1ae:	43b9      	bics	r1, r7
     1b0:	4331      	orrs	r1, r6
     1b2:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1b4:	7b9a      	ldrb	r2, [r3, #14]
     1b6:	43aa      	bics	r2, r5
     1b8:	4322      	orrs	r2, r4
     1ba:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1bc:	4a0f      	ldr	r2, [pc, #60]	; (1fc <Reset_Handler+0xd8>)
     1be:	6853      	ldr	r3, [r2, #4]
     1c0:	2180      	movs	r1, #128	; 0x80
     1c2:	430b      	orrs	r3, r1
     1c4:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1c6:	4b0e      	ldr	r3, [pc, #56]	; (200 <Reset_Handler+0xdc>)
     1c8:	4798      	blx	r3
        main();
     1ca:	4b0e      	ldr	r3, [pc, #56]	; (204 <Reset_Handler+0xe0>)
     1cc:	4798      	blx	r3
     1ce:	e7fe      	b.n	1ce <Reset_Handler+0xaa>
     1d0:	00001ca4 	.word	0x00001ca4
     1d4:	20000000 	.word	0x20000000
     1d8:	20000000 	.word	0x20000000
     1dc:	20000004 	.word	0x20000004
     1e0:	20000000 	.word	0x20000000
     1e4:	200002b4 	.word	0x200002b4
     1e8:	e000ed00 	.word	0xe000ed00
     1ec:	00000000 	.word	0x00000000
     1f0:	41007000 	.word	0x41007000
     1f4:	41005000 	.word	0x41005000
     1f8:	41004800 	.word	0x41004800
     1fc:	41004000 	.word	0x41004000
     200:	00001b3d 	.word	0x00001b3d
     204:	00001b31 	.word	0x00001b31

00000208 <ADC_0_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     208:	4a04      	ldr	r2, [pc, #16]	; (21c <ADC_0_CLOCK_init+0x14>)
     20a:	6a11      	ldr	r1, [r2, #32]
     20c:	2380      	movs	r3, #128	; 0x80
     20e:	025b      	lsls	r3, r3, #9
     210:	430b      	orrs	r3, r1
     212:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     214:	4a02      	ldr	r2, [pc, #8]	; (220 <ADC_0_CLOCK_init+0x18>)
     216:	4b03      	ldr	r3, [pc, #12]	; (224 <ADC_0_CLOCK_init+0x1c>)
     218:	805a      	strh	r2, [r3, #2]

void ADC_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, ADC);
	_gclk_enable_channel(ADC_GCLK_ID, CONF_GCLK_ADC_SRC);
}
     21a:	4770      	bx	lr
     21c:	40000400 	.word	0x40000400
     220:	0000401e 	.word	0x0000401e
     224:	40000c00 	.word	0x40000c00

00000228 <ADC_0_init>:

void ADC_0_init(void)
{
     228:	b510      	push	{r4, lr}
	ADC_0_CLOCK_init();
     22a:	4b04      	ldr	r3, [pc, #16]	; (23c <ADC_0_init+0x14>)
     22c:	4798      	blx	r3
	ADC_0_PORT_init();
	adc_sync_init(&ADC_0, ADC, (void *)NULL);
     22e:	2200      	movs	r2, #0
     230:	4903      	ldr	r1, [pc, #12]	; (240 <ADC_0_init+0x18>)
     232:	4804      	ldr	r0, [pc, #16]	; (244 <ADC_0_init+0x1c>)
     234:	4b04      	ldr	r3, [pc, #16]	; (248 <ADC_0_init+0x20>)
     236:	4798      	blx	r3
}
     238:	bd10      	pop	{r4, pc}
     23a:	46c0      	nop			; (mov r8, r8)
     23c:	00000209 	.word	0x00000209
     240:	42004000 	.word	0x42004000
     244:	20000288 	.word	0x20000288
     248:	00000405 	.word	0x00000405

0000024c <USART_0_PORT_init>:

void USART_0_PORT_init(void)
{
     24c:	b530      	push	{r4, r5, lr}
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     24e:	4b0e      	ldr	r3, [pc, #56]	; (288 <USART_0_PORT_init+0x3c>)
     250:	2244      	movs	r2, #68	; 0x44
     252:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     254:	2501      	movs	r5, #1
     256:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     258:	2401      	movs	r4, #1
     25a:	4321      	orrs	r1, r4
     25c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     25e:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     260:	2032      	movs	r0, #50	; 0x32
     262:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     264:	3a35      	subs	r2, #53	; 0x35
     266:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     268:	3a0c      	subs	r2, #12
     26a:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     26c:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     26e:	2145      	movs	r1, #69	; 0x45
     270:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     272:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     274:	4322      	orrs	r2, r4
     276:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     278:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     27a:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     27c:	3936      	subs	r1, #54	; 0x36
     27e:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     280:	3121      	adds	r1, #33	; 0x21
     282:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     284:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PA04, PINMUX_PA04D_SERCOM0_PAD0);

	gpio_set_pin_function(PA05, PINMUX_PA05D_SERCOM0_PAD1);
}
     286:	bd30      	pop	{r4, r5, pc}
     288:	41004400 	.word	0x41004400

0000028c <USART_0_CLOCK_init>:
     28c:	4a04      	ldr	r2, [pc, #16]	; (2a0 <USART_0_CLOCK_init+0x14>)
     28e:	6a13      	ldr	r3, [r2, #32]
     290:	2104      	movs	r1, #4
     292:	430b      	orrs	r3, r1
     294:	6213      	str	r3, [r2, #32]
     296:	4a03      	ldr	r2, [pc, #12]	; (2a4 <USART_0_CLOCK_init+0x18>)
     298:	4b03      	ldr	r3, [pc, #12]	; (2a8 <USART_0_CLOCK_init+0x1c>)
     29a:	805a      	strh	r2, [r3, #2]

void USART_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM0);
	_gclk_enable_channel(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
}
     29c:	4770      	bx	lr
     29e:	46c0      	nop			; (mov r8, r8)
     2a0:	40000400 	.word	0x40000400
     2a4:	00004014 	.word	0x00004014
     2a8:	40000c00 	.word	0x40000c00

000002ac <USART_0_init>:

void USART_0_init(void)
{
     2ac:	b510      	push	{r4, lr}
	USART_0_CLOCK_init();
     2ae:	4b05      	ldr	r3, [pc, #20]	; (2c4 <USART_0_init+0x18>)
     2b0:	4798      	blx	r3
	usart_sync_init(&USART_0, SERCOM0, (void *)NULL);
     2b2:	2200      	movs	r2, #0
     2b4:	4904      	ldr	r1, [pc, #16]	; (2c8 <USART_0_init+0x1c>)
     2b6:	4805      	ldr	r0, [pc, #20]	; (2cc <USART_0_init+0x20>)
     2b8:	4b05      	ldr	r3, [pc, #20]	; (2d0 <USART_0_init+0x24>)
     2ba:	4798      	blx	r3
	USART_0_PORT_init();
     2bc:	4b05      	ldr	r3, [pc, #20]	; (2d4 <USART_0_init+0x28>)
     2be:	4798      	blx	r3
}
     2c0:	bd10      	pop	{r4, pc}
     2c2:	46c0      	nop			; (mov r8, r8)
     2c4:	0000028d 	.word	0x0000028d
     2c8:	42000800 	.word	0x42000800
     2cc:	2000028c 	.word	0x2000028c
     2d0:	00000679 	.word	0x00000679
     2d4:	0000024d 	.word	0x0000024d

000002d8 <USB_0_PORT_init>:
	_gclk_enable_channel(RTC_GCLK_ID, CONF_GCLK_RTC_SRC);
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
}

void USB_0_PORT_init(void)
{
     2d8:	b5f0      	push	{r4, r5, r6, r7, lr}
     2da:	46c6      	mov	lr, r8
     2dc:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2de:	24c0      	movs	r4, #192	; 0xc0
     2e0:	05e4      	lsls	r4, r4, #23
     2e2:	2280      	movs	r2, #128	; 0x80
     2e4:	0452      	lsls	r2, r2, #17
     2e6:	60a2      	str	r2, [r4, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2e8:	4b1a      	ldr	r3, [pc, #104]	; (354 <USB_0_PORT_init+0x7c>)
     2ea:	2780      	movs	r7, #128	; 0x80
     2ec:	05ff      	lsls	r7, r7, #23
     2ee:	629f      	str	r7, [r3, #40]	; 0x28
     2f0:	4919      	ldr	r1, [pc, #100]	; (358 <USB_0_PORT_init+0x80>)
     2f2:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2f4:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     2f6:	2058      	movs	r0, #88	; 0x58
     2f8:	5c19      	ldrb	r1, [r3, r0]
     2fa:	2204      	movs	r2, #4
     2fc:	4690      	mov	r8, r2
     2fe:	4391      	bics	r1, r2
     300:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     302:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     304:	2601      	movs	r6, #1
     306:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     308:	2501      	movs	r5, #1
     30a:	4329      	orrs	r1, r5
     30c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     30e:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     310:	381c      	subs	r0, #28
     312:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     314:	320b      	adds	r2, #11
     316:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     318:	3a09      	subs	r2, #9
     31a:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     31c:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     31e:	2180      	movs	r1, #128	; 0x80
     320:	0489      	lsls	r1, r1, #18
     322:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     324:	629f      	str	r7, [r3, #40]	; 0x28
     326:	4f0d      	ldr	r7, [pc, #52]	; (35c <USB_0_PORT_init+0x84>)
     328:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     32a:	6161      	str	r1, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     32c:	2159      	movs	r1, #89	; 0x59
     32e:	5c5c      	ldrb	r4, [r3, r1]
     330:	4642      	mov	r2, r8
     332:	4394      	bics	r4, r2
     334:	545c      	strb	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     336:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     338:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     33a:	432a      	orrs	r2, r5
     33c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     33e:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     340:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     342:	394a      	subs	r1, #74	; 0x4a
     344:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     346:	3151      	adds	r1, #81	; 0x51
     348:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     34a:	541a      	strb	r2, [r3, r0]
	                      // <GPIO_PIN_FUNCTION_E"> E
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      PINMUX_PA25G_USB_DP);
}
     34c:	bc04      	pop	{r2}
     34e:	4690      	mov	r8, r2
     350:	bdf0      	pop	{r4, r5, r6, r7, pc}
     352:	46c0      	nop			; (mov r8, r8)
     354:	41004400 	.word	0x41004400
     358:	c0000100 	.word	0xc0000100
     35c:	c0000200 	.word	0xc0000200

00000360 <USB_0_CLOCK_init>:
			PM->APBBMASK.reg |= 1 << peripheral;
     360:	4b06      	ldr	r3, [pc, #24]	; (37c <USB_0_CLOCK_init+0x1c>)
     362:	69da      	ldr	r2, [r3, #28]
     364:	2120      	movs	r1, #32
     366:	430a      	orrs	r2, r1
     368:	61da      	str	r2, [r3, #28]
			PM->AHBMASK.reg |= 1 << peripheral;
     36a:	695a      	ldr	r2, [r3, #20]
     36c:	3120      	adds	r1, #32
     36e:	430a      	orrs	r2, r1
     370:	615a      	str	r2, [r3, #20]
     372:	4a03      	ldr	r2, [pc, #12]	; (380 <USB_0_CLOCK_init+0x20>)
     374:	4b03      	ldr	r3, [pc, #12]	; (384 <USB_0_CLOCK_init+0x24>)
     376:	805a      	strh	r2, [r3, #2]
{

	_pm_enable_bus_clock(PM_BUS_APBB, USB);
	_pm_enable_bus_clock(PM_BUS_AHB, USB);
	_gclk_enable_channel(USB_GCLK_ID, CONF_GCLK_USB_SRC);
}
     378:	4770      	bx	lr
     37a:	46c0      	nop			; (mov r8, r8)
     37c:	40000400 	.word	0x40000400
     380:	00004006 	.word	0x00004006
     384:	40000c00 	.word	0x40000c00

00000388 <USB_0_init>:

void USB_0_init(void)
{
     388:	b510      	push	{r4, lr}
	USB_0_CLOCK_init();
     38a:	4b03      	ldr	r3, [pc, #12]	; (398 <USB_0_init+0x10>)
     38c:	4798      	blx	r3
	usb_d_init();
     38e:	4b03      	ldr	r3, [pc, #12]	; (39c <USB_0_init+0x14>)
     390:	4798      	blx	r3
	USB_0_PORT_init();
     392:	4b03      	ldr	r3, [pc, #12]	; (3a0 <USB_0_init+0x18>)
     394:	4798      	blx	r3
}
     396:	bd10      	pop	{r4, pc}
     398:	00000361 	.word	0x00000361
     39c:	00000935 	.word	0x00000935
     3a0:	000002d9 	.word	0x000002d9

000003a4 <system_init>:

void system_init(void)
{
     3a4:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     3a6:	4b0c      	ldr	r3, [pc, #48]	; (3d8 <system_init+0x34>)
     3a8:	4798      	blx	r3
	init_mcu();

	ADC_0_init();
     3aa:	4b0c      	ldr	r3, [pc, #48]	; (3dc <system_init+0x38>)
     3ac:	4798      	blx	r3

	USART_0_init();
     3ae:	4b0c      	ldr	r3, [pc, #48]	; (3e0 <system_init+0x3c>)
     3b0:	4798      	blx	r3
		PM->APBAMASK.reg |= 1 << peripheral;
     3b2:	4a0c      	ldr	r2, [pc, #48]	; (3e4 <system_init+0x40>)
     3b4:	6993      	ldr	r3, [r2, #24]
     3b6:	2120      	movs	r1, #32
     3b8:	430b      	orrs	r3, r1
     3ba:	6193      	str	r3, [r2, #24]
     3bc:	4a0a      	ldr	r2, [pc, #40]	; (3e8 <system_init+0x44>)
     3be:	4b0b      	ldr	r3, [pc, #44]	; (3ec <system_init+0x48>)
     3c0:	805a      	strh	r2, [r3, #2]
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
     3c2:	4b0b      	ldr	r3, [pc, #44]	; (3f0 <system_init+0x4c>)
     3c4:	4798      	blx	r3
     3c6:	0002      	movs	r2, r0
     3c8:	490a      	ldr	r1, [pc, #40]	; (3f4 <system_init+0x50>)
     3ca:	480b      	ldr	r0, [pc, #44]	; (3f8 <system_init+0x54>)
     3cc:	4b0b      	ldr	r3, [pc, #44]	; (3fc <system_init+0x58>)
     3ce:	4798      	blx	r3

	TIMER_0_init();

	USB_0_init();
     3d0:	4b0b      	ldr	r3, [pc, #44]	; (400 <system_init+0x5c>)
     3d2:	4798      	blx	r3
}
     3d4:	bd10      	pop	{r4, pc}
     3d6:	46c0      	nop			; (mov r8, r8)
     3d8:	00000b49 	.word	0x00000b49
     3dc:	00000229 	.word	0x00000229
     3e0:	000002ad 	.word	0x000002ad
     3e4:	40000400 	.word	0x40000400
     3e8:	00004004 	.word	0x00004004
     3ec:	40000c00 	.word	0x40000c00
     3f0:	00000c15 	.word	0x00000c15
     3f4:	40001400 	.word	0x40001400
     3f8:	20000298 	.word	0x20000298
     3fc:	00000551 	.word	0x00000551
     400:	00000389 	.word	0x00000389

00000404 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
     404:	b570      	push	{r4, r5, r6, lr}
     406:	0004      	movs	r4, r0
     408:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     40a:	2800      	cmp	r0, #0
     40c:	d00c      	beq.n	428 <adc_sync_init+0x24>
     40e:	0008      	movs	r0, r1
     410:	1e43      	subs	r3, r0, #1
     412:	4198      	sbcs	r0, r3
     414:	b2c0      	uxtb	r0, r0
     416:	2239      	movs	r2, #57	; 0x39
     418:	4904      	ldr	r1, [pc, #16]	; (42c <adc_sync_init+0x28>)
     41a:	4b05      	ldr	r3, [pc, #20]	; (430 <adc_sync_init+0x2c>)
     41c:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
     41e:	0029      	movs	r1, r5
     420:	0020      	movs	r0, r4
     422:	4b04      	ldr	r3, [pc, #16]	; (434 <adc_sync_init+0x30>)
     424:	4798      	blx	r3
}
     426:	bd70      	pop	{r4, r5, r6, pc}
     428:	2000      	movs	r0, #0
     42a:	e7f4      	b.n	416 <adc_sync_init+0x12>
     42c:	00001ba8 	.word	0x00001ba8
     430:	00000999 	.word	0x00000999
     434:	00000b11 	.word	0x00000b11

00000438 <atomic_enter_critical>:
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     438:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     43c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     43e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     440:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     444:	4770      	bx	lr

00000446 <atomic_leave_critical>:
     446:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     44a:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     44c:	f383 8810 	msr	PRIMASK, r3
}
     450:	4770      	bx	lr
	...

00000454 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     456:	46ce      	mov	lr, r9
     458:	4647      	mov	r7, r8
     45a:	b580      	push	{r7, lr}
     45c:	4681      	mov	r9, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     45e:	6803      	ldr	r3, [r0, #0]
     460:	469c      	mov	ip, r3
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     462:	2b00      	cmp	r3, #0
     464:	d005      	beq.n	472 <timer_add_timer_task+0x1e>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
     466:	688e      	ldr	r6, [r1, #8]
     468:	001c      	movs	r4, r3
     46a:	2500      	movs	r5, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     46c:	2701      	movs	r7, #1
     46e:	1abf      	subs	r7, r7, r2
     470:	e00d      	b.n	48e <timer_add_timer_task+0x3a>
		list_insert_as_head(list, new_task);
     472:	4b12      	ldr	r3, [pc, #72]	; (4bc <timer_add_timer_task+0x68>)
     474:	4798      	blx	r3
		return;
     476:	e018      	b.n	4aa <timer_add_timer_task+0x56>
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     478:	18fb      	adds	r3, r7, r3
     47a:	68a0      	ldr	r0, [r4, #8]
     47c:	4680      	mov	r8, r0
     47e:	4443      	add	r3, r8
		if (time_left >= new_task->interval)
     480:	42b3      	cmp	r3, r6
     482:	d20c      	bcs.n	49e <timer_add_timer_task+0x4a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
     484:	6823      	ldr	r3, [r4, #0]
     486:	0025      	movs	r5, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     488:	2b00      	cmp	r3, #0
     48a:	d00b      	beq.n	4a4 <timer_add_timer_task+0x50>
     48c:	001c      	movs	r4, r3
		if (it->time_label <= time) {
     48e:	6863      	ldr	r3, [r4, #4]
     490:	4293      	cmp	r3, r2
     492:	d8f1      	bhi.n	478 <timer_add_timer_task+0x24>
			time_left = it->interval - (time - it->time_label);
     494:	68a0      	ldr	r0, [r4, #8]
     496:	4680      	mov	r8, r0
     498:	4443      	add	r3, r8
     49a:	1a9b      	subs	r3, r3, r2
     49c:	e7f0      	b.n	480 <timer_add_timer_task+0x2c>
			break;
		prev = it;
	}

	if (it == head) {
     49e:	45a4      	cmp	ip, r4
     4a0:	d007      	beq.n	4b2 <timer_add_timer_task+0x5e>
     4a2:	002c      	movs	r4, r5
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     4a4:	0020      	movs	r0, r4
     4a6:	4b06      	ldr	r3, [pc, #24]	; (4c0 <timer_add_timer_task+0x6c>)
     4a8:	4798      	blx	r3
	}
}
     4aa:	bc0c      	pop	{r2, r3}
     4ac:	4690      	mov	r8, r2
     4ae:	4699      	mov	r9, r3
     4b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     4b2:	4648      	mov	r0, r9
     4b4:	4b01      	ldr	r3, [pc, #4]	; (4bc <timer_add_timer_task+0x68>)
     4b6:	4798      	blx	r3
     4b8:	e7f7      	b.n	4aa <timer_add_timer_task+0x56>
     4ba:	46c0      	nop			; (mov r8, r8)
     4bc:	000009c5 	.word	0x000009c5
     4c0:	000009f1 	.word	0x000009f1

000004c4 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     4c4:	b5f0      	push	{r4, r5, r6, r7, lr}
     4c6:	46c6      	mov	lr, r8
     4c8:	b500      	push	{lr}
     4ca:	b082      	sub	sp, #8
     4cc:	0007      	movs	r7, r0
	return (void *)list->head;
     4ce:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     4d0:	6903      	ldr	r3, [r0, #16]
     4d2:	3301      	adds	r3, #1
     4d4:	4698      	mov	r8, r3
     4d6:	6103      	str	r3, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     4d8:	7e03      	ldrb	r3, [r0, #24]
     4da:	07db      	lsls	r3, r3, #31
     4dc:	d411      	bmi.n	502 <timer_process_counted+0x3e>
     4de:	7e03      	ldrb	r3, [r0, #24]
     4e0:	079b      	lsls	r3, r3, #30
     4e2:	d40e      	bmi.n	502 <timer_process_counted+0x3e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
     4e4:	2c00      	cmp	r4, #0
     4e6:	d010      	beq.n	50a <timer_process_counted+0x46>
     4e8:	4643      	mov	r3, r8
     4ea:	6862      	ldr	r2, [r4, #4]
     4ec:	1a9b      	subs	r3, r3, r2
     4ee:	68a2      	ldr	r2, [r4, #8]
     4f0:	4293      	cmp	r3, r2
     4f2:	d30a      	bcc.n	50a <timer_process_counted+0x46>
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
     4f4:	2314      	movs	r3, #20
     4f6:	469c      	mov	ip, r3
     4f8:	4484      	add	ip, r0
     4fa:	4663      	mov	r3, ip
     4fc:	9301      	str	r3, [sp, #4]
     4fe:	4e12      	ldr	r6, [pc, #72]	; (548 <timer_process_counted+0x84>)
     500:	e014      	b.n	52c <timer_process_counted+0x68>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     502:	7e3b      	ldrb	r3, [r7, #24]
     504:	2202      	movs	r2, #2
     506:	4313      	orrs	r3, r2
     508:	763b      	strb	r3, [r7, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
     50a:	b002      	add	sp, #8
     50c:	bc04      	pop	{r2}
     50e:	4690      	mov	r8, r2
     510:	bdf0      	pop	{r4, r5, r6, r7, pc}
     512:	697d      	ldr	r5, [r7, #20]
		tmp->cb(tmp);
     514:	68e3      	ldr	r3, [r4, #12]
     516:	0020      	movs	r0, r4
     518:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
     51a:	2d00      	cmp	r5, #0
     51c:	d0f5      	beq.n	50a <timer_process_counted+0x46>
		it = (struct timer_task *)list_get_head(&timer->tasks);
     51e:	002c      	movs	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
     520:	4643      	mov	r3, r8
     522:	686a      	ldr	r2, [r5, #4]
     524:	1a9b      	subs	r3, r3, r2
     526:	68aa      	ldr	r2, [r5, #8]
     528:	4293      	cmp	r3, r2
     52a:	d3ee      	bcc.n	50a <timer_process_counted+0x46>
		list_remove_head(&timer->tasks);
     52c:	9801      	ldr	r0, [sp, #4]
     52e:	47b0      	blx	r6
		if (TIMER_TASK_REPEAT == tmp->mode) {
     530:	7c23      	ldrb	r3, [r4, #16]
     532:	2b01      	cmp	r3, #1
     534:	d1ed      	bne.n	512 <timer_process_counted+0x4e>
			tmp->time_label = time;
     536:	4643      	mov	r3, r8
     538:	6063      	str	r3, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     53a:	4642      	mov	r2, r8
     53c:	0021      	movs	r1, r4
     53e:	9801      	ldr	r0, [sp, #4]
     540:	4b02      	ldr	r3, [pc, #8]	; (54c <timer_process_counted+0x88>)
     542:	4798      	blx	r3
     544:	e7e5      	b.n	512 <timer_process_counted+0x4e>
     546:	46c0      	nop			; (mov r8, r8)
     548:	000009f9 	.word	0x000009f9
     54c:	00000455 	.word	0x00000455

00000550 <timer_init>:
{
     550:	b570      	push	{r4, r5, r6, lr}
     552:	0005      	movs	r5, r0
     554:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     556:	2800      	cmp	r0, #0
     558:	d011      	beq.n	57e <timer_init+0x2e>
     55a:	0008      	movs	r0, r1
     55c:	1e43      	subs	r3, r0, #1
     55e:	4198      	sbcs	r0, r3
     560:	b2c0      	uxtb	r0, r0
     562:	223b      	movs	r2, #59	; 0x3b
     564:	4907      	ldr	r1, [pc, #28]	; (584 <timer_init+0x34>)
     566:	4b08      	ldr	r3, [pc, #32]	; (588 <timer_init+0x38>)
     568:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     56a:	0021      	movs	r1, r4
     56c:	0028      	movs	r0, r5
     56e:	4b07      	ldr	r3, [pc, #28]	; (58c <timer_init+0x3c>)
     570:	4798      	blx	r3
	descr->time                           = 0;
     572:	2300      	movs	r3, #0
     574:	612b      	str	r3, [r5, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     576:	4b06      	ldr	r3, [pc, #24]	; (590 <timer_init+0x40>)
     578:	602b      	str	r3, [r5, #0]
}
     57a:	2000      	movs	r0, #0
     57c:	bd70      	pop	{r4, r5, r6, pc}
     57e:	2000      	movs	r0, #0
     580:	e7ef      	b.n	562 <timer_init+0x12>
     582:	46c0      	nop			; (mov r8, r8)
     584:	00001bc4 	.word	0x00001bc4
     588:	00000999 	.word	0x00000999
     58c:	00000bb9 	.word	0x00000bb9
     590:	000004c5 	.word	0x000004c5

00000594 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     596:	46ce      	mov	lr, r9
     598:	4647      	mov	r7, r8
     59a:	b580      	push	{r7, lr}
     59c:	0004      	movs	r4, r0
     59e:	000f      	movs	r7, r1
     5a0:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     5a2:	2800      	cmp	r0, #0
     5a4:	d026      	beq.n	5f4 <usart_sync_write+0x60>
     5a6:	2900      	cmp	r1, #0
     5a8:	d026      	beq.n	5f8 <usart_sync_write+0x64>
     5aa:	0010      	movs	r0, r2
     5ac:	1e43      	subs	r3, r0, #1
     5ae:	4198      	sbcs	r0, r3
     5b0:	22f1      	movs	r2, #241	; 0xf1
     5b2:	4912      	ldr	r1, [pc, #72]	; (5fc <usart_sync_write+0x68>)
     5b4:	4b12      	ldr	r3, [pc, #72]	; (600 <usart_sync_write+0x6c>)
     5b6:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     5b8:	3408      	adds	r4, #8
     5ba:	4d12      	ldr	r5, [pc, #72]	; (604 <usart_sync_write+0x70>)
     5bc:	0020      	movs	r0, r4
     5be:	47a8      	blx	r5
     5c0:	2800      	cmp	r0, #0
     5c2:	d0fb      	beq.n	5bc <usart_sync_write+0x28>
     5c4:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     5c6:	4b10      	ldr	r3, [pc, #64]	; (608 <usart_sync_write+0x74>)
     5c8:	4699      	mov	r9, r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
     5ca:	4d0e      	ldr	r5, [pc, #56]	; (604 <usart_sync_write+0x70>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
     5cc:	5db9      	ldrb	r1, [r7, r6]
     5ce:	0020      	movs	r0, r4
     5d0:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
     5d2:	0020      	movs	r0, r4
     5d4:	47a8      	blx	r5
     5d6:	2800      	cmp	r0, #0
     5d8:	d0fb      	beq.n	5d2 <usart_sync_write+0x3e>
			;
	} while (++offset < length);
     5da:	3601      	adds	r6, #1
     5dc:	4546      	cmp	r6, r8
     5de:	d3f5      	bcc.n	5cc <usart_sync_write+0x38>
	while (!_usart_sync_is_transmit_done(&descr->device))
     5e0:	4d0a      	ldr	r5, [pc, #40]	; (60c <usart_sync_write+0x78>)
     5e2:	0020      	movs	r0, r4
     5e4:	47a8      	blx	r5
     5e6:	2800      	cmp	r0, #0
     5e8:	d0fb      	beq.n	5e2 <usart_sync_write+0x4e>
		;
	return (int32_t)offset;
}
     5ea:	0030      	movs	r0, r6
     5ec:	bc0c      	pop	{r2, r3}
     5ee:	4690      	mov	r8, r2
     5f0:	4699      	mov	r9, r3
     5f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     5f4:	2000      	movs	r0, #0
     5f6:	e7db      	b.n	5b0 <usart_sync_write+0x1c>
     5f8:	2000      	movs	r0, #0
     5fa:	e7d9      	b.n	5b0 <usart_sync_write+0x1c>
     5fc:	00001bdc 	.word	0x00001bdc
     600:	00000999 	.word	0x00000999
     604:	00000d15 	.word	0x00000d15
     608:	00000d05 	.word	0x00000d05
     60c:	00000d1f 	.word	0x00000d1f

00000610 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     612:	46ce      	mov	lr, r9
     614:	4647      	mov	r7, r8
     616:	b580      	push	{r7, lr}
     618:	0004      	movs	r4, r0
     61a:	000f      	movs	r7, r1
     61c:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     61e:	2800      	cmp	r0, #0
     620:	d01d      	beq.n	65e <usart_sync_read+0x4e>
     622:	2900      	cmp	r1, #0
     624:	d01d      	beq.n	662 <usart_sync_read+0x52>
     626:	0010      	movs	r0, r2
     628:	1e43      	subs	r3, r0, #1
     62a:	4198      	sbcs	r0, r3
     62c:	2286      	movs	r2, #134	; 0x86
     62e:	0052      	lsls	r2, r2, #1
     630:	490d      	ldr	r1, [pc, #52]	; (668 <usart_sync_read+0x58>)
     632:	4b0e      	ldr	r3, [pc, #56]	; (66c <usart_sync_read+0x5c>)
     634:	4798      	blx	r3
	uint32_t                      offset = 0;
     636:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     638:	3408      	adds	r4, #8
     63a:	4d0d      	ldr	r5, [pc, #52]	; (670 <usart_sync_read+0x60>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     63c:	4b0d      	ldr	r3, [pc, #52]	; (674 <usart_sync_read+0x64>)
     63e:	4699      	mov	r9, r3
		while (!_usart_sync_is_byte_received(&descr->device))
     640:	0020      	movs	r0, r4
     642:	47a8      	blx	r5
     644:	2800      	cmp	r0, #0
     646:	d0fb      	beq.n	640 <usart_sync_read+0x30>
		buf[offset] = _usart_sync_read_byte(&descr->device);
     648:	0020      	movs	r0, r4
     64a:	47c8      	blx	r9
     64c:	55b8      	strb	r0, [r7, r6]
	} while (++offset < length);
     64e:	3601      	adds	r6, #1
     650:	4546      	cmp	r6, r8
     652:	d3f5      	bcc.n	640 <usart_sync_read+0x30>

	return (int32_t)offset;
}
     654:	0030      	movs	r0, r6
     656:	bc0c      	pop	{r2, r3}
     658:	4690      	mov	r8, r2
     65a:	4699      	mov	r9, r3
     65c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     65e:	2000      	movs	r0, #0
     660:	e7e4      	b.n	62c <usart_sync_read+0x1c>
     662:	2000      	movs	r0, #0
     664:	e7e2      	b.n	62c <usart_sync_read+0x1c>
     666:	46c0      	nop			; (mov r8, r8)
     668:	00001bdc 	.word	0x00001bdc
     66c:	00000999 	.word	0x00000999
     670:	00000d29 	.word	0x00000d29
     674:	00000d0d 	.word	0x00000d0d

00000678 <usart_sync_init>:
{
     678:	b570      	push	{r4, r5, r6, lr}
     67a:	0005      	movs	r5, r0
     67c:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     67e:	2800      	cmp	r0, #0
     680:	d013      	beq.n	6aa <usart_sync_init+0x32>
     682:	0008      	movs	r0, r1
     684:	1e43      	subs	r3, r0, #1
     686:	4198      	sbcs	r0, r3
     688:	b2c0      	uxtb	r0, r0
     68a:	2234      	movs	r2, #52	; 0x34
     68c:	4908      	ldr	r1, [pc, #32]	; (6b0 <usart_sync_init+0x38>)
     68e:	4b09      	ldr	r3, [pc, #36]	; (6b4 <usart_sync_init+0x3c>)
     690:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     692:	0028      	movs	r0, r5
     694:	3008      	adds	r0, #8
     696:	0021      	movs	r1, r4
     698:	4b07      	ldr	r3, [pc, #28]	; (6b8 <usart_sync_init+0x40>)
     69a:	4798      	blx	r3
	if (init_status) {
     69c:	2800      	cmp	r0, #0
     69e:	d103      	bne.n	6a8 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
     6a0:	4b06      	ldr	r3, [pc, #24]	; (6bc <usart_sync_init+0x44>)
     6a2:	606b      	str	r3, [r5, #4]
	descr->io.write = usart_sync_write;
     6a4:	4b06      	ldr	r3, [pc, #24]	; (6c0 <usart_sync_init+0x48>)
     6a6:	602b      	str	r3, [r5, #0]
}
     6a8:	bd70      	pop	{r4, r5, r6, pc}
     6aa:	2000      	movs	r0, #0
     6ac:	e7ed      	b.n	68a <usart_sync_init+0x12>
     6ae:	46c0      	nop			; (mov r8, r8)
     6b0:	00001bdc 	.word	0x00001bdc
     6b4:	00000999 	.word	0x00000999
     6b8:	00000cd9 	.word	0x00000cd9
     6bc:	00000611 	.word	0x00000611
     6c0:	00000595 	.word	0x00000595

000006c4 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
     6c4:	b5f0      	push	{r4, r5, r6, r7, lr}
     6c6:	0004      	movs	r4, r0
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     6c8:	4b0e      	ldr	r3, [pc, #56]	; (704 <_usb_d_find_ep+0x40>)
     6ca:	785a      	ldrb	r2, [r3, #1]
     6cc:	4290      	cmp	r0, r2
     6ce:	d017      	beq.n	700 <_usb_d_find_ep+0x3c>
     6d0:	2300      	movs	r3, #0
     6d2:	2000      	movs	r0, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     6d4:	4f0b      	ldr	r7, [pc, #44]	; (704 <_usb_d_find_ep+0x40>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     6d6:	260f      	movs	r6, #15
     6d8:	4026      	ands	r6, r4
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     6da:	003d      	movs	r5, r7
     6dc:	e008      	b.n	6f0 <_usb_d_find_ep+0x2c>
     6de:	3001      	adds	r0, #1
     6e0:	b240      	sxtb	r0, r0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     6e2:	2804      	cmp	r0, #4
     6e4:	d00a      	beq.n	6fc <_usb_d_find_ep+0x38>
     6e6:	3320      	adds	r3, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     6e8:	18ea      	adds	r2, r5, r3
     6ea:	7852      	ldrb	r2, [r2, #1]
     6ec:	42a2      	cmp	r2, r4
     6ee:	d006      	beq.n	6fe <_usb_d_find_ep+0x3a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     6f0:	5dd9      	ldrb	r1, [r3, r7]
     6f2:	2900      	cmp	r1, #0
     6f4:	d1f3      	bne.n	6de <_usb_d_find_ep+0x1a>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     6f6:	4296      	cmp	r6, r2
     6f8:	d1f1      	bne.n	6de <_usb_d_find_ep+0x1a>
     6fa:	e000      	b.n	6fe <_usb_d_find_ep+0x3a>
			return i;
		}
	}
	return -1;
     6fc:	3805      	subs	r0, #5
}
     6fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     700:	2000      	movs	r0, #0
     702:	e7fc      	b.n	6fe <_usb_d_find_ep+0x3a>
     704:	2000001c 	.word	0x2000001c

00000708 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
     708:	2000      	movs	r0, #0
     70a:	4770      	bx	lr

0000070c <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
     70c:	b570      	push	{r4, r5, r6, lr}
     70e:	0004      	movs	r4, r0
     710:	000d      	movs	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
     712:	4b0a      	ldr	r3, [pc, #40]	; (73c <usb_d_cb_trans_more+0x30>)
     714:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     716:	0142      	lsls	r2, r0, #5
     718:	4b09      	ldr	r3, [pc, #36]	; (740 <usb_d_cb_trans_more+0x34>)
     71a:	189b      	adds	r3, r3, r2
     71c:	789a      	ldrb	r2, [r3, #2]
		return ept->callbacks.more(ep, transfered);
	}
	return false;
     71e:	2300      	movs	r3, #0
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     720:	2a03      	cmp	r2, #3
     722:	d001      	beq.n	728 <usb_d_cb_trans_more+0x1c>
}
     724:	0018      	movs	r0, r3
     726:	bd70      	pop	{r4, r5, r6, pc}
		return ept->callbacks.more(ep, transfered);
     728:	0140      	lsls	r0, r0, #5
     72a:	4b05      	ldr	r3, [pc, #20]	; (740 <usb_d_cb_trans_more+0x34>)
     72c:	1818      	adds	r0, r3, r0
     72e:	6983      	ldr	r3, [r0, #24]
     730:	0029      	movs	r1, r5
     732:	0020      	movs	r0, r4
     734:	4798      	blx	r3
     736:	0003      	movs	r3, r0
     738:	e7f4      	b.n	724 <usb_d_cb_trans_more+0x18>
     73a:	46c0      	nop			; (mov r8, r8)
     73c:	000006c5 	.word	0x000006c5
     740:	2000001c 	.word	0x2000001c

00000744 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
     744:	b5f0      	push	{r4, r5, r6, r7, lr}
     746:	b085      	sub	sp, #20
     748:	0005      	movs	r5, r0
     74a:	000f      	movs	r7, r1
     74c:	0016      	movs	r6, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     74e:	4b51      	ldr	r3, [pc, #324]	; (894 <_usb_d_cb_trans_done+0x150>)
     750:	4798      	blx	r3
     752:	0004      	movs	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
     754:	2f00      	cmp	r7, #0
     756:	d162      	bne.n	81e <_usb_d_cb_trans_done+0xda>
		ept->xfer.hdr.status = USB_XFER_DONE;
     758:	4b4f      	ldr	r3, [pc, #316]	; (898 <_usb_d_cb_trans_done+0x154>)
     75a:	0142      	lsls	r2, r0, #5
     75c:	1899      	adds	r1, r3, r2
     75e:	2000      	movs	r0, #0
     760:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     762:	5cd3      	ldrb	r3, [r2, r3]
     764:	2b00      	cmp	r3, #0
     766:	d00e      	beq.n	786 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     768:	0162      	lsls	r2, r4, #5
     76a:	4b4b      	ldr	r3, [pc, #300]	; (898 <_usb_d_cb_trans_done+0x154>)
     76c:	189b      	adds	r3, r3, r2
     76e:	2201      	movs	r2, #1
     770:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
     772:	0164      	lsls	r4, r4, #5
     774:	4b48      	ldr	r3, [pc, #288]	; (898 <_usb_d_cb_trans_done+0x154>)
     776:	191c      	adds	r4, r3, r4
     778:	78e1      	ldrb	r1, [r4, #3]
     77a:	69e3      	ldr	r3, [r4, #28]
     77c:	0032      	movs	r2, r6
     77e:	0028      	movs	r0, r5
     780:	4798      	blx	r3
}
     782:	b005      	add	sp, #20
     784:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
     786:	788b      	ldrb	r3, [r1, #2]
     788:	2b03      	cmp	r3, #3
     78a:	d00c      	beq.n	7a6 <_usb_d_cb_trans_done+0x62>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
     78c:	4b42      	ldr	r3, [pc, #264]	; (898 <_usb_d_cb_trans_done+0x154>)
     78e:	0162      	lsls	r2, r4, #5
     790:	320c      	adds	r2, #12
     792:	189a      	adds	r2, r3, r2
     794:	0164      	lsls	r4, r4, #5
     796:	191c      	adds	r4, r3, r4
     798:	7860      	ldrb	r0, [r4, #1]
     79a:	2100      	movs	r1, #0
     79c:	69e3      	ldr	r3, [r4, #28]
     79e:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     7a0:	2302      	movs	r3, #2
     7a2:	70a3      	strb	r3, [r4, #2]
     7a4:	e7ed      	b.n	782 <_usb_d_cb_trans_done+0x3e>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
     7a6:	4a3c      	ldr	r2, [pc, #240]	; (898 <_usb_d_cb_trans_done+0x154>)
     7a8:	000b      	movs	r3, r1
     7aa:	250c      	movs	r5, #12
     7ac:	574d      	ldrsb	r5, [r1, r5]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
     7ae:	0161      	lsls	r1, r4, #5
     7b0:	310c      	adds	r1, #12
     7b2:	1852      	adds	r2, r2, r1
     7b4:	7858      	ldrb	r0, [r3, #1]
     7b6:	69db      	ldr	r3, [r3, #28]
     7b8:	2101      	movs	r1, #1
     7ba:	4798      	blx	r3
		if (err) {
     7bc:	2800      	cmp	r0, #0
     7be:	d017      	beq.n	7f0 <_usb_d_cb_trans_done+0xac>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
     7c0:	0162      	lsls	r2, r4, #5
     7c2:	4b35      	ldr	r3, [pc, #212]	; (898 <_usb_d_cb_trans_done+0x154>)
     7c4:	189b      	adds	r3, r3, r2
     7c6:	2205      	movs	r2, #5
     7c8:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
     7ca:	3a03      	subs	r2, #3
     7cc:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
     7ce:	2d00      	cmp	r5, #0
     7d0:	db09      	blt.n	7e6 <_usb_d_cb_trans_done+0xa2>
     7d2:	0164      	lsls	r4, r4, #5
     7d4:	4b30      	ldr	r3, [pc, #192]	; (898 <_usb_d_cb_trans_done+0x154>)
     7d6:	191c      	adds	r4, r3, r4
     7d8:	7860      	ldrb	r0, [r4, #1]
     7da:	2380      	movs	r3, #128	; 0x80
     7dc:	4318      	orrs	r0, r3
     7de:	2101      	movs	r1, #1
     7e0:	4b2e      	ldr	r3, [pc, #184]	; (89c <_usb_d_cb_trans_done+0x158>)
     7e2:	4798      	blx	r3
     7e4:	e7cd      	b.n	782 <_usb_d_cb_trans_done+0x3e>
     7e6:	0164      	lsls	r4, r4, #5
     7e8:	4b2b      	ldr	r3, [pc, #172]	; (898 <_usb_d_cb_trans_done+0x154>)
     7ea:	191c      	adds	r4, r3, r4
     7ec:	7860      	ldrb	r0, [r4, #1]
     7ee:	e7f6      	b.n	7de <_usb_d_cb_trans_done+0x9a>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     7f0:	0164      	lsls	r4, r4, #5
     7f2:	4b29      	ldr	r3, [pc, #164]	; (898 <_usb_d_cb_trans_done+0x154>)
     7f4:	191c      	adds	r4, r3, r4
     7f6:	2304      	movs	r3, #4
     7f8:	70a3      	strb	r3, [r4, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
     7fa:	7863      	ldrb	r3, [r4, #1]
	struct usb_d_transfer trans
     7fc:	2200      	movs	r2, #0
     7fe:	9201      	str	r2, [sp, #4]
     800:	9202      	str	r2, [sp, #8]
     802:	2d00      	cmp	r5, #0
     804:	db08      	blt.n	818 <_usb_d_cb_trans_done+0xd4>
     806:	3280      	adds	r2, #128	; 0x80
     808:	4313      	orrs	r3, r2
     80a:	a801      	add	r0, sp, #4
     80c:	7203      	strb	r3, [r0, #8]
     80e:	2301      	movs	r3, #1
     810:	7243      	strb	r3, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
     812:	4b23      	ldr	r3, [pc, #140]	; (8a0 <_usb_d_cb_trans_done+0x15c>)
     814:	4798      	blx	r3
     816:	e7b4      	b.n	782 <_usb_d_cb_trans_done+0x3e>
	struct usb_d_transfer trans
     818:	220f      	movs	r2, #15
     81a:	4013      	ands	r3, r2
     81c:	e7f5      	b.n	80a <_usb_d_cb_trans_done+0xc6>
	} else if (code == USB_TRANS_STALL) {
     81e:	2f01      	cmp	r7, #1
     820:	d00a      	beq.n	838 <_usb_d_cb_trans_done+0xf4>
	} else if (code == USB_TRANS_ABORT) {
     822:	2f02      	cmp	r7, #2
     824:	d01d      	beq.n	862 <_usb_d_cb_trans_done+0x11e>
	} else if (code == USB_TRANS_RESET) {
     826:	2f03      	cmp	r7, #3
     828:	d02c      	beq.n	884 <_usb_d_cb_trans_done+0x140>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
     82a:	0142      	lsls	r2, r0, #5
     82c:	4b1a      	ldr	r3, [pc, #104]	; (898 <_usb_d_cb_trans_done+0x154>)
     82e:	189b      	adds	r3, r3, r2
     830:	2206      	movs	r2, #6
     832:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
     834:	70da      	strb	r2, [r3, #3]
     836:	e79c      	b.n	772 <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_HALT;
     838:	4b17      	ldr	r3, [pc, #92]	; (898 <_usb_d_cb_trans_done+0x154>)
     83a:	0142      	lsls	r2, r0, #5
     83c:	1899      	adds	r1, r3, r2
     83e:	2002      	movs	r0, #2
     840:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     842:	5cd3      	ldrb	r3, [r2, r3]
     844:	2b00      	cmp	r3, #0
     846:	d005      	beq.n	854 <_usb_d_cb_trans_done+0x110>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
     848:	0162      	lsls	r2, r4, #5
     84a:	4b13      	ldr	r3, [pc, #76]	; (898 <_usb_d_cb_trans_done+0x154>)
     84c:	189b      	adds	r3, r3, r2
     84e:	2205      	movs	r2, #5
     850:	709a      	strb	r2, [r3, #2]
     852:	e78e      	b.n	772 <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     854:	2202      	movs	r2, #2
     856:	708a      	strb	r2, [r1, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     858:	2100      	movs	r1, #0
     85a:	0028      	movs	r0, r5
     85c:	4b0f      	ldr	r3, [pc, #60]	; (89c <_usb_d_cb_trans_done+0x158>)
     85e:	4798      	blx	r3
     860:	e787      	b.n	772 <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_ABORT;
     862:	4b0d      	ldr	r3, [pc, #52]	; (898 <_usb_d_cb_trans_done+0x154>)
     864:	0142      	lsls	r2, r0, #5
     866:	1899      	adds	r1, r3, r2
     868:	2004      	movs	r0, #4
     86a:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     86c:	5cd3      	ldrb	r3, [r2, r3]
     86e:	2b00      	cmp	r3, #0
     870:	d005      	beq.n	87e <_usb_d_cb_trans_done+0x13a>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     872:	0162      	lsls	r2, r4, #5
     874:	4b08      	ldr	r3, [pc, #32]	; (898 <_usb_d_cb_trans_done+0x154>)
     876:	189b      	adds	r3, r3, r2
     878:	2201      	movs	r2, #1
     87a:	709a      	strb	r2, [r3, #2]
     87c:	e779      	b.n	772 <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     87e:	2302      	movs	r3, #2
     880:	708b      	strb	r3, [r1, #2]
			return;
     882:	e77e      	b.n	782 <_usb_d_cb_trans_done+0x3e>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
     884:	0142      	lsls	r2, r0, #5
     886:	4b04      	ldr	r3, [pc, #16]	; (898 <_usb_d_cb_trans_done+0x154>)
     888:	189b      	adds	r3, r3, r2
     88a:	2200      	movs	r2, #0
     88c:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
     88e:	3205      	adds	r2, #5
     890:	70da      	strb	r2, [r3, #3]
     892:	e76e      	b.n	772 <_usb_d_cb_trans_done+0x2e>
     894:	000006c5 	.word	0x000006c5
     898:	2000001c 	.word	0x2000001c
     89c:	000014dd 	.word	0x000014dd
     8a0:	000016b1 	.word	0x000016b1

000008a4 <usb_d_cb_trans_setup>:
{
     8a4:	b5f0      	push	{r4, r5, r6, r7, lr}
     8a6:	46c6      	mov	lr, r8
     8a8:	b500      	push	{lr}
     8aa:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     8ac:	4b1d      	ldr	r3, [pc, #116]	; (924 <usb_d_cb_trans_setup+0x80>)
     8ae:	4798      	blx	r3
     8b0:	0006      	movs	r6, r0
	uint8_t *        req      = ept->xfer.req;
     8b2:	0145      	lsls	r5, r0, #5
     8b4:	350c      	adds	r5, #12
     8b6:	4b1c      	ldr	r3, [pc, #112]	; (928 <usb_d_cb_trans_setup+0x84>)
     8b8:	195d      	adds	r5, r3, r5
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
     8ba:	0029      	movs	r1, r5
     8bc:	0020      	movs	r0, r4
     8be:	4b1b      	ldr	r3, [pc, #108]	; (92c <usb_d_cb_trans_setup+0x88>)
     8c0:	4798      	blx	r3
	if (n != 8) {
     8c2:	b2c0      	uxtb	r0, r0
     8c4:	2808      	cmp	r0, #8
     8c6:	d00a      	beq.n	8de <usb_d_cb_trans_setup+0x3a>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     8c8:	2101      	movs	r1, #1
     8ca:	0020      	movs	r0, r4
     8cc:	4d18      	ldr	r5, [pc, #96]	; (930 <usb_d_cb_trans_setup+0x8c>)
     8ce:	47a8      	blx	r5
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     8d0:	2080      	movs	r0, #128	; 0x80
     8d2:	4320      	orrs	r0, r4
     8d4:	2101      	movs	r1, #1
     8d6:	47a8      	blx	r5
}
     8d8:	bc04      	pop	{r2}
     8da:	4690      	mov	r8, r2
     8dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     8de:	2100      	movs	r1, #0
     8e0:	0020      	movs	r0, r4
     8e2:	4b13      	ldr	r3, [pc, #76]	; (930 <usb_d_cb_trans_setup+0x8c>)
     8e4:	4698      	mov	r8, r3
     8e6:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
     8e8:	2780      	movs	r7, #128	; 0x80
     8ea:	4327      	orrs	r7, r4
     8ec:	2100      	movs	r1, #0
     8ee:	0038      	movs	r0, r7
     8f0:	47c0      	blx	r8
	ept->xfer.hdr.state = USB_EP_S_IDLE;
     8f2:	0172      	lsls	r2, r6, #5
     8f4:	4b0c      	ldr	r3, [pc, #48]	; (928 <usb_d_cb_trans_setup+0x84>)
     8f6:	189b      	adds	r3, r3, r2
     8f8:	2201      	movs	r2, #1
     8fa:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
     8fc:	695b      	ldr	r3, [r3, #20]
     8fe:	0029      	movs	r1, r5
     900:	0020      	movs	r0, r4
     902:	4798      	blx	r3
     904:	2800      	cmp	r0, #0
     906:	d1e7      	bne.n	8d8 <usb_d_cb_trans_setup+0x34>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
     908:	0176      	lsls	r6, r6, #5
     90a:	4b07      	ldr	r3, [pc, #28]	; (928 <usb_d_cb_trans_setup+0x84>)
     90c:	199e      	adds	r6, r3, r6
     90e:	2305      	movs	r3, #5
     910:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     912:	2101      	movs	r1, #1
     914:	0020      	movs	r0, r4
     916:	4c06      	ldr	r4, [pc, #24]	; (930 <usb_d_cb_trans_setup+0x8c>)
     918:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     91a:	2101      	movs	r1, #1
     91c:	0038      	movs	r0, r7
     91e:	47a0      	blx	r4
     920:	e7da      	b.n	8d8 <usb_d_cb_trans_setup+0x34>
     922:	46c0      	nop			; (mov r8, r8)
     924:	000006c5 	.word	0x000006c5
     928:	2000001c 	.word	0x2000001c
     92c:	00001641 	.word	0x00001641
     930:	000014dd 	.word	0x000014dd

00000934 <usb_d_init>:

int32_t usb_d_init(void)
{
     934:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
     936:	4b10      	ldr	r3, [pc, #64]	; (978 <usb_d_init+0x44>)
     938:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
     93a:	2800      	cmp	r0, #0
     93c:	db1b      	blt.n	976 <usb_d_init+0x42>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
     93e:	4c0f      	ldr	r4, [pc, #60]	; (97c <usb_d_init+0x48>)
     940:	2280      	movs	r2, #128	; 0x80
     942:	2100      	movs	r1, #0
     944:	0020      	movs	r0, r4
     946:	4b0e      	ldr	r3, [pc, #56]	; (980 <usb_d_init+0x4c>)
     948:	4798      	blx	r3
     94a:	0023      	movs	r3, r4
     94c:	3480      	adds	r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     94e:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     950:	4a0c      	ldr	r2, [pc, #48]	; (984 <usb_d_init+0x50>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     952:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     954:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
     956:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
     958:	61da      	str	r2, [r3, #28]
     95a:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     95c:	42a3      	cmp	r3, r4
     95e:	d1f8      	bne.n	952 <usb_d_init+0x1e>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
     960:	4909      	ldr	r1, [pc, #36]	; (988 <usb_d_init+0x54>)
     962:	2000      	movs	r0, #0
     964:	4c09      	ldr	r4, [pc, #36]	; (98c <usb_d_init+0x58>)
     966:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
     968:	4909      	ldr	r1, [pc, #36]	; (990 <usb_d_init+0x5c>)
     96a:	2001      	movs	r0, #1
     96c:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
     96e:	4909      	ldr	r1, [pc, #36]	; (994 <usb_d_init+0x60>)
     970:	2002      	movs	r0, #2
     972:	47a0      	blx	r4
	return ERR_NONE;
     974:	2000      	movs	r0, #0
}
     976:	bd10      	pop	{r4, pc}
     978:	00001401 	.word	0x00001401
     97c:	2000001c 	.word	0x2000001c
     980:	00001b97 	.word	0x00001b97
     984:	00000709 	.word	0x00000709
     988:	000008a5 	.word	0x000008a5
     98c:	000018c5 	.word	0x000018c5
     990:	0000070d 	.word	0x0000070d
     994:	00000745 	.word	0x00000745

00000998 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     998:	2800      	cmp	r0, #0
     99a:	d100      	bne.n	99e <assert+0x6>
		__asm("BKPT #0");
     99c:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     99e:	4770      	bx	lr

000009a0 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     9a0:	6803      	ldr	r3, [r0, #0]
     9a2:	2b00      	cmp	r3, #0
     9a4:	d00a      	beq.n	9bc <is_list_element+0x1c>
		if (it == element) {
     9a6:	428b      	cmp	r3, r1
     9a8:	d00a      	beq.n	9c0 <is_list_element+0x20>
	for (it = list->head; it; it = it->next) {
     9aa:	681b      	ldr	r3, [r3, #0]
     9ac:	2b00      	cmp	r3, #0
     9ae:	d003      	beq.n	9b8 <is_list_element+0x18>
		if (it == element) {
     9b0:	4299      	cmp	r1, r3
     9b2:	d1fa      	bne.n	9aa <is_list_element+0xa>
			return true;
     9b4:	2001      	movs	r0, #1
     9b6:	e000      	b.n	9ba <is_list_element+0x1a>
		}
	}

	return false;
     9b8:	2000      	movs	r0, #0
}
     9ba:	4770      	bx	lr
	return false;
     9bc:	2000      	movs	r0, #0
     9be:	e7fc      	b.n	9ba <is_list_element+0x1a>
			return true;
     9c0:	2001      	movs	r0, #1
     9c2:	e7fa      	b.n	9ba <is_list_element+0x1a>

000009c4 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     9c4:	b570      	push	{r4, r5, r6, lr}
     9c6:	0004      	movs	r4, r0
     9c8:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
     9ca:	4b06      	ldr	r3, [pc, #24]	; (9e4 <list_insert_as_head+0x20>)
     9cc:	4798      	blx	r3
     9ce:	2301      	movs	r3, #1
     9d0:	4058      	eors	r0, r3
     9d2:	b2c0      	uxtb	r0, r0
     9d4:	2239      	movs	r2, #57	; 0x39
     9d6:	4904      	ldr	r1, [pc, #16]	; (9e8 <list_insert_as_head+0x24>)
     9d8:	4b04      	ldr	r3, [pc, #16]	; (9ec <list_insert_as_head+0x28>)
     9da:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
     9dc:	6823      	ldr	r3, [r4, #0]
     9de:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
     9e0:	6025      	str	r5, [r4, #0]
}
     9e2:	bd70      	pop	{r4, r5, r6, pc}
     9e4:	000009a1 	.word	0x000009a1
     9e8:	00001bf8 	.word	0x00001bf8
     9ec:	00000999 	.word	0x00000999

000009f0 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
     9f0:	6803      	ldr	r3, [r0, #0]
     9f2:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
     9f4:	6001      	str	r1, [r0, #0]
}
     9f6:	4770      	bx	lr

000009f8 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
     9f8:	6803      	ldr	r3, [r0, #0]
     9fa:	2b00      	cmp	r3, #0
     9fc:	d001      	beq.n	a02 <list_remove_head+0xa>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
     9fe:	681a      	ldr	r2, [r3, #0]
     a00:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
     a02:	0018      	movs	r0, r3
     a04:	4770      	bx	lr

00000a06 <_adc_get_regs>:
		}
	}

	ASSERT(false);
	return 0;
}
     a06:	2000      	movs	r0, #0
     a08:	4770      	bx	lr
	...

00000a0c <_adc_init>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] i  The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{
     a0c:	b570      	push	{r4, r5, r6, lr}
     a0e:	0004      	movs	r4, r0
     a10:	000d      	movs	r5, r1
	ASSERT(hw == ADC);
     a12:	4b39      	ldr	r3, [pc, #228]	; (af8 <_adc_init+0xec>)
     a14:	18c0      	adds	r0, r0, r3
     a16:	4242      	negs	r2, r0
     a18:	4142      	adcs	r2, r0
     a1a:	b2d0      	uxtb	r0, r2
     a1c:	2294      	movs	r2, #148	; 0x94
     a1e:	4937      	ldr	r1, [pc, #220]	; (afc <_adc_init+0xf0>)
     a20:	4b37      	ldr	r3, [pc, #220]	; (b00 <_adc_init+0xf4>)
     a22:	4798      	blx	r3

	uint16_t calib_reg;

	calib_reg = ADC_CALIB_BIAS_CAL((*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos))
     a24:	4b37      	ldr	r3, [pc, #220]	; (b04 <_adc_init+0xf8>)
     a26:	681a      	ldr	r2, [r3, #0]
     a28:	0152      	lsls	r2, r2, #5
     a2a:	23e0      	movs	r3, #224	; 0xe0
     a2c:	00db      	lsls	r3, r3, #3
     a2e:	401a      	ands	r2, r3
	            | ADC_CALIB_LINEARITY_CAL((*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos));
     a30:	4b35      	ldr	r3, [pc, #212]	; (b08 <_adc_init+0xfc>)
     a32:	6859      	ldr	r1, [r3, #4]
     a34:	0149      	lsls	r1, r1, #5
     a36:	681b      	ldr	r3, [r3, #0]
     a38:	0edb      	lsrs	r3, r3, #27
     a3a:	430b      	orrs	r3, r1
     a3c:	21ff      	movs	r1, #255	; 0xff
     a3e:	400b      	ands	r3, r1
	calib_reg = ADC_CALIB_BIAS_CAL((*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos))
     a40:	431a      	orrs	r2, r3
typedef uint8_t  hri_adc_swtrig_reg_t;
typedef uint8_t  hri_adc_winctrl_reg_t;

static inline void hri_adc_wait_for_sync(const void *const hw)
{
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     a42:	7e63      	ldrb	r3, [r4, #25]
     a44:	09db      	lsrs	r3, r3, #7
     a46:	d1fc      	bne.n	a42 <_adc_init+0x36>
}

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Adc *)hw)->CTRLA.reg;
     a48:	7823      	ldrb	r3, [r4, #0]

	hri_adc_wait_for_sync(hw);
	if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
     a4a:	079b      	lsls	r3, r3, #30
     a4c:	d504      	bpl.n	a58 <_adc_init+0x4c>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
     a4e:	2300      	movs	r3, #0
     a50:	7023      	strb	r3, [r4, #0]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     a52:	7e63      	ldrb	r3, [r4, #25]
     a54:	09db      	lsrs	r3, r3, #7
     a56:	d1fc      	bne.n	a52 <_adc_init+0x46>
	((Adc *)hw)->CTRLA.reg = data;
     a58:	2301      	movs	r3, #1
     a5a:	7023      	strb	r3, [r4, #0]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     a5c:	7e63      	ldrb	r3, [r4, #25]
     a5e:	09db      	lsrs	r3, r3, #7
     a60:	d1fc      	bne.n	a5c <_adc_init+0x50>
}

static inline void hri_adc_write_CALIB_reg(const void *const hw, hri_adc_calib_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CALIB.reg = data;
     a62:	8522      	strh	r2, [r4, #40]	; 0x28
	}
	hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	hri_adc_wait_for_sync(hw);

	hri_adc_write_CALIB_reg(hw, calib_reg);
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
     a64:	00ea      	lsls	r2, r5, #3
     a66:	1b52      	subs	r2, r2, r5
     a68:	0092      	lsls	r2, r2, #2
     a6a:	4b28      	ldr	r3, [pc, #160]	; (b0c <_adc_init+0x100>)
     a6c:	189b      	adds	r3, r3, r2
     a6e:	789a      	ldrb	r2, [r3, #2]
	((Adc *)hw)->REFCTRL.reg = data;
     a70:	7062      	strb	r2, [r4, #1]
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
     a72:	78da      	ldrb	r2, [r3, #3]
	((Adc *)hw)->AVGCTRL.reg = data;
     a74:	70a2      	strb	r2, [r4, #2]
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
     a76:	791a      	ldrb	r2, [r3, #4]
	((Adc *)hw)->SAMPCTRL.reg = data;
     a78:	70e2      	strb	r2, [r4, #3]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
     a7a:	7c1a      	ldrb	r2, [r3, #16]
	((Adc *)hw)->EVCTRL.reg = data;
     a7c:	7522      	strb	r2, [r4, #20]
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
     a7e:	8ada      	ldrh	r2, [r3, #22]
	((Adc *)hw)->GAINCORR.reg = data;
     a80:	84a2      	strh	r2, [r4, #36]	; 0x24
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
     a82:	8b1a      	ldrh	r2, [r3, #24]
	((Adc *)hw)->OFFSETCORR.reg = data;
     a84:	84e2      	strh	r2, [r4, #38]	; 0x26
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
     a86:	7e99      	ldrb	r1, [r3, #26]
}

static inline void hri_adc_write_DBGCTRL_reg(const void *const hw, hri_adc_dbgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->DBGCTRL.reg = data;
     a88:	222a      	movs	r2, #42	; 0x2a
     a8a:	54a1      	strb	r1, [r4, r2]
	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
     a8c:	88db      	ldrh	r3, [r3, #6]
	((Adc *)hw)->CTRLB.reg = data;
     a8e:	80a3      	strh	r3, [r4, #4]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     a90:	7e63      	ldrb	r3, [r4, #25]
     a92:	09db      	lsrs	r3, r3, #7
     a94:	d1fc      	bne.n	a90 <_adc_init+0x84>
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
     a96:	00eb      	lsls	r3, r5, #3
     a98:	1b5b      	subs	r3, r3, r5
     a9a:	009b      	lsls	r3, r3, #2
     a9c:	4a1b      	ldr	r2, [pc, #108]	; (b0c <_adc_init+0x100>)
     a9e:	18d3      	adds	r3, r2, r3
     aa0:	68db      	ldr	r3, [r3, #12]
	((Adc *)hw)->INPUTCTRL.reg = data;
     aa2:	6123      	str	r3, [r4, #16]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     aa4:	7e63      	ldrb	r3, [r4, #25]
     aa6:	09db      	lsrs	r3, r3, #7
     aa8:	d1fc      	bne.n	aa4 <_adc_init+0x98>
	hri_adc_write_WINCTRL_reg(hw, _adcs[i].win_ctrl);
     aaa:	00eb      	lsls	r3, r5, #3
     aac:	1b5b      	subs	r3, r3, r5
     aae:	009b      	lsls	r3, r3, #2
     ab0:	4a16      	ldr	r2, [pc, #88]	; (b0c <_adc_init+0x100>)
     ab2:	18d3      	adds	r3, r2, r3
     ab4:	7a1b      	ldrb	r3, [r3, #8]
	((Adc *)hw)->WINCTRL.reg = data;
     ab6:	7223      	strb	r3, [r4, #8]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     ab8:	7e63      	ldrb	r3, [r4, #25]
     aba:	09db      	lsrs	r3, r3, #7
     abc:	d1fc      	bne.n	ab8 <_adc_init+0xac>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
     abe:	00eb      	lsls	r3, r5, #3
     ac0:	1b5b      	subs	r3, r3, r5
     ac2:	009b      	lsls	r3, r3, #2
     ac4:	4a11      	ldr	r2, [pc, #68]	; (b0c <_adc_init+0x100>)
     ac6:	18d3      	adds	r3, r2, r3
     ac8:	8a5b      	ldrh	r3, [r3, #18]
	((Adc *)hw)->WINLT.reg = data;
     aca:	83a3      	strh	r3, [r4, #28]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     acc:	7e63      	ldrb	r3, [r4, #25]
     ace:	09db      	lsrs	r3, r3, #7
     ad0:	d1fc      	bne.n	acc <_adc_init+0xc0>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
     ad2:	00eb      	lsls	r3, r5, #3
     ad4:	1b5b      	subs	r3, r3, r5
     ad6:	009b      	lsls	r3, r3, #2
     ad8:	4a0c      	ldr	r2, [pc, #48]	; (b0c <_adc_init+0x100>)
     ada:	18d3      	adds	r3, r2, r3
     adc:	8a9b      	ldrh	r3, [r3, #20]
	((Adc *)hw)->WINUT.reg = data;
     ade:	8423      	strh	r3, [r4, #32]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     ae0:	7e63      	ldrb	r3, [r4, #25]
     ae2:	09db      	lsrs	r3, r3, #7
     ae4:	d1fc      	bne.n	ae0 <_adc_init+0xd4>
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
     ae6:	00eb      	lsls	r3, r5, #3
     ae8:	1b5d      	subs	r5, r3, r5
     aea:	00ad      	lsls	r5, r5, #2
     aec:	4b07      	ldr	r3, [pc, #28]	; (b0c <_adc_init+0x100>)
     aee:	195d      	adds	r5, r3, r5
     af0:	786b      	ldrb	r3, [r5, #1]
	((Adc *)hw)->CTRLA.reg = data;
     af2:	7023      	strb	r3, [r4, #0]

	return ERR_NONE;
}
     af4:	2000      	movs	r0, #0
     af6:	bd70      	pop	{r4, r5, r6, pc}
     af8:	bdffc000 	.word	0xbdffc000
     afc:	00001c34 	.word	0x00001c34
     b00:	00000999 	.word	0x00000999
     b04:	00806024 	.word	0x00806024
     b08:	00806020 	.word	0x00806020
     b0c:	00001c18 	.word	0x00001c18

00000b10 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
     b10:	b570      	push	{r4, r5, r6, lr}
     b12:	0005      	movs	r5, r0
     b14:	000c      	movs	r4, r1
	ASSERT(device);
     b16:	1e43      	subs	r3, r0, #1
     b18:	4198      	sbcs	r0, r3
     b1a:	b2c0      	uxtb	r0, r0
     b1c:	22c5      	movs	r2, #197	; 0xc5
     b1e:	4906      	ldr	r1, [pc, #24]	; (b38 <_adc_sync_init+0x28>)
     b20:	4b06      	ldr	r3, [pc, #24]	; (b3c <_adc_sync_init+0x2c>)
     b22:	4798      	blx	r3

	device->hw = hw;
     b24:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
     b26:	0020      	movs	r0, r4
     b28:	4b05      	ldr	r3, [pc, #20]	; (b40 <_adc_sync_init+0x30>)
     b2a:	4798      	blx	r3
     b2c:	0001      	movs	r1, r0
     b2e:	0020      	movs	r0, r4
     b30:	4b04      	ldr	r3, [pc, #16]	; (b44 <_adc_sync_init+0x34>)
     b32:	4798      	blx	r3
}
     b34:	bd70      	pop	{r4, r5, r6, pc}
     b36:	46c0      	nop			; (mov r8, r8)
     b38:	00001c34 	.word	0x00001c34
     b3c:	00000999 	.word	0x00000999
     b40:	00000a07 	.word	0x00000a07
     b44:	00000a0d 	.word	0x00000a0d

00000b48 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     b48:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     b4a:	4b06      	ldr	r3, [pc, #24]	; (b64 <_init_chip+0x1c>)
     b4c:	685a      	ldr	r2, [r3, #4]
     b4e:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     b50:	4b05      	ldr	r3, [pc, #20]	; (b68 <_init_chip+0x20>)
     b52:	4798      	blx	r3
	_sysctrl_init_sources();
     b54:	4b05      	ldr	r3, [pc, #20]	; (b6c <_init_chip+0x24>)
     b56:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
     b58:	4b05      	ldr	r3, [pc, #20]	; (b70 <_init_chip+0x28>)
     b5a:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     b5c:	20ff      	movs	r0, #255	; 0xff
     b5e:	4b05      	ldr	r3, [pc, #20]	; (b74 <_init_chip+0x2c>)
     b60:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     b62:	bd10      	pop	{r4, pc}
     b64:	41004000 	.word	0x41004000
     b68:	00000b99 	.word	0x00000b99
     b6c:	00000d35 	.word	0x00000d35
     b70:	00000d7d 	.word	0x00000d7d
     b74:	00000b79 	.word	0x00000b79

00000b78 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     b78:	07c3      	lsls	r3, r0, #31
     b7a:	d50a      	bpl.n	b92 <_gclk_init_generators_by_fref+0x1a>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     b7c:	4b05      	ldr	r3, [pc, #20]	; (b94 <_gclk_init_generators_by_fref+0x1c>)
     b7e:	2280      	movs	r2, #128	; 0x80
     b80:	0052      	lsls	r2, r2, #1
     b82:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     b84:	2283      	movs	r2, #131	; 0x83
     b86:	0252      	lsls	r2, r2, #9
     b88:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     b8a:	001a      	movs	r2, r3
     b8c:	7853      	ldrb	r3, [r2, #1]
     b8e:	09db      	lsrs	r3, r3, #7
     b90:	d1fc      	bne.n	b8c <_gclk_init_generators_by_fref+0x14>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
     b92:	4770      	bx	lr
     b94:	40000c00 	.word	0x40000c00

00000b98 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     b98:	4b06      	ldr	r3, [pc, #24]	; (bb4 <_pm_init+0x1c>)
     b9a:	7a1a      	ldrb	r2, [r3, #8]
     b9c:	b2d2      	uxtb	r2, r2
     b9e:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     ba0:	7a5a      	ldrb	r2, [r3, #9]
     ba2:	b2d2      	uxtb	r2, r2
     ba4:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     ba6:	7a9a      	ldrb	r2, [r3, #10]
     ba8:	b2d2      	uxtb	r2, r2
     baa:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     bac:	7ada      	ldrb	r2, [r3, #11]
     bae:	b2d2      	uxtb	r2, r2
     bb0:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     bb2:	4770      	bx	lr
     bb4:	40000400 	.word	0x40000400

00000bb8 <_timer_init>:

/**
 * \brief Initialize Timer
 */
int32_t _timer_init(struct _timer_device *const dev, void *const hw)
{
     bb8:	b570      	push	{r4, r5, r6, lr}
     bba:	0004      	movs	r4, r0
     bbc:	000d      	movs	r5, r1
	ASSERT(dev);
     bbe:	1e43      	subs	r3, r0, #1
     bc0:	4198      	sbcs	r0, r3
     bc2:	b2c0      	uxtb	r0, r0
     bc4:	2233      	movs	r2, #51	; 0x33
     bc6:	4910      	ldr	r1, [pc, #64]	; (c08 <_timer_init+0x50>)
     bc8:	4b10      	ldr	r3, [pc, #64]	; (c0c <_timer_init+0x54>)
     bca:	4798      	blx	r3

	uint16_t register_value;
	dev->hw = hw;
     bcc:	60e5      	str	r5, [r4, #12]
}

static inline void hri_rtcmode0_write_CTRL_reg(const void *const hw, hri_rtcmode0_ctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRL.reg = data;
     bce:	2301      	movs	r3, #1
     bd0:	802b      	strh	r3, [r5, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     bd2:	7aab      	ldrb	r3, [r5, #10]
     bd4:	09db      	lsrs	r3, r3, #7
     bd6:	d1fc      	bne.n	bd2 <_timer_init+0x1a>

	hri_rtcmode0_write_CTRL_reg(dev->hw, RTC_MODE0_CTRL_SWRST);
	hri_rtcmode0_wait_for_sync(dev->hw);
     bd8:	68e2      	ldr	r2, [r4, #12]
     bda:	7a93      	ldrb	r3, [r2, #10]
     bdc:	09db      	lsrs	r3, r3, #7
     bde:	d1fc      	bne.n	bda <_timer_init+0x22>
	((Rtc *)hw)->MODE0.CTRL.reg = data;
     be0:	3380      	adds	r3, #128	; 0x80
     be2:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     be4:	7a93      	ldrb	r3, [r2, #10]
     be6:	09db      	lsrs	r3, r3, #7
     be8:	d1fc      	bne.n	be4 <_timer_init+0x2c>
	/* clear counter on compare/timer match */
	register_value |= RTC_MODE0_CTRL_MATCHCLR;

	hri_rtcmode0_write_CTRL_reg(dev->hw, register_value);

	hri_rtcmode0_write_COMP_COMP_bf(dev->hw, 0, CONF_RTC_COMP_VAL);
     bea:	68e2      	ldr	r2, [r4, #12]

static inline void hri_rtcmode0_write_COMP_COMP_bf(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	uint32_t tmp;
	RTC_CRITICAL_SECTION_ENTER();
	tmp = ((Rtc *)hw)->MODE0.COMP[index].reg;
     bec:	6993      	ldr	r3, [r2, #24]
	tmp &= ~RTC_MODE0_COMP_COMP_Msk;
	tmp |= RTC_MODE0_COMP_COMP(data);
	((Rtc *)hw)->MODE0.COMP[index].reg = tmp;
     bee:	2380      	movs	r3, #128	; 0x80
     bf0:	00db      	lsls	r3, r3, #3
     bf2:	6193      	str	r3, [r2, #24]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     bf4:	7a93      	ldrb	r3, [r2, #10]
     bf6:	09db      	lsrs	r3, r3, #7
     bf8:	d1fc      	bne.n	bf4 <_timer_init+0x3c>
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
     bfa:	3301      	adds	r3, #1
     bfc:	68e2      	ldr	r2, [r4, #12]
     bfe:	71d3      	strb	r3, [r2, #7]
	        | (CONF_RTC_PEREO4 << RTC_MODE0_EVCTRL_PEREO4_Pos) | (CONF_RTC_PEREO5 << RTC_MODE0_EVCTRL_PEREO5_Pos)
	        | (CONF_RTC_PEREO6 << RTC_MODE0_EVCTRL_PEREO6_Pos) | (CONF_RTC_PEREO7 << RTC_MODE0_EVCTRL_PEREO7_Pos)
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	_rtc_dev = dev;
     c00:	4b03      	ldr	r3, [pc, #12]	; (c10 <_timer_init+0x58>)
     c02:	601c      	str	r4, [r3, #0]

	return ERR_NONE;
}
     c04:	2000      	movs	r0, #0
     c06:	bd70      	pop	{r4, r5, r6, pc}
     c08:	00001c4c 	.word	0x00001c4c
     c0c:	00000999 	.word	0x00000999
     c10:	2000009c 	.word	0x2000009c

00000c14 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return NULL;
}
     c14:	2000      	movs	r0, #0
     c16:	4770      	bx	lr

00000c18 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
     c18:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
     c1a:	4b07      	ldr	r3, [pc, #28]	; (c38 <RTC_Handler+0x20>)
     c1c:	681c      	ldr	r4, [r3, #0]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
     c1e:	68e3      	ldr	r3, [r4, #12]
     c20:	7a1b      	ldrb	r3, [r3, #8]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
     c22:	07db      	lsls	r3, r3, #31
     c24:	d507      	bpl.n	c36 <RTC_Handler+0x1e>
		if (dev->timer_cb.period_expired) {
     c26:	6823      	ldr	r3, [r4, #0]
     c28:	2b00      	cmp	r3, #0
     c2a:	d001      	beq.n	c30 <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
     c2c:	0020      	movs	r0, r4
     c2e:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
     c30:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
     c32:	2201      	movs	r2, #1
     c34:	721a      	strb	r2, [r3, #8]
}
     c36:	bd10      	pop	{r4, pc}
     c38:	2000009c 	.word	0x2000009c

00000c3c <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
     c3c:	b510      	push	{r4, lr}
     c3e:	0004      	movs	r4, r0
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     c40:	4b1f      	ldr	r3, [pc, #124]	; (cc0 <_usart_init+0x84>)
     c42:	18c3      	adds	r3, r0, r3
     c44:	0a9b      	lsrs	r3, r3, #10
		if (_usarts[i].number == sercom_offset) {
     c46:	b2db      	uxtb	r3, r3
     c48:	2b00      	cmp	r3, #0
     c4a:	d004      	beq.n	c56 <_usart_init+0x1a>
	ASSERT(false);
     c4c:	4a1d      	ldr	r2, [pc, #116]	; (cc4 <_usart_init+0x88>)
     c4e:	491e      	ldr	r1, [pc, #120]	; (cc8 <_usart_init+0x8c>)
     c50:	2000      	movs	r0, #0
     c52:	4b1e      	ldr	r3, [pc, #120]	; (ccc <_usart_init+0x90>)
     c54:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     c56:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     c58:	07db      	lsls	r3, r3, #31
     c5a:	d418      	bmi.n	c8e <_usart_init+0x52>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     c5c:	2203      	movs	r2, #3
     c5e:	69e3      	ldr	r3, [r4, #28]
     c60:	421a      	tst	r2, r3
     c62:	d1fc      	bne.n	c5e <_usart_init+0x22>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     c64:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     c66:	079b      	lsls	r3, r3, #30
     c68:	d50b      	bpl.n	c82 <_usart_init+0x46>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     c6a:	6823      	ldr	r3, [r4, #0]
     c6c:	2202      	movs	r2, #2
     c6e:	4393      	bics	r3, r2
     c70:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     c72:	3201      	adds	r2, #1
     c74:	69e3      	ldr	r3, [r4, #28]
     c76:	421a      	tst	r2, r3
     c78:	d1fc      	bne.n	c74 <_usart_init+0x38>
     c7a:	2202      	movs	r2, #2
     c7c:	69e3      	ldr	r3, [r4, #28]
     c7e:	421a      	tst	r2, r3
     c80:	d1fc      	bne.n	c7c <_usart_init+0x40>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     c82:	2305      	movs	r3, #5
     c84:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     c86:	2203      	movs	r2, #3
     c88:	69e3      	ldr	r3, [r4, #28]
     c8a:	421a      	tst	r2, r3
     c8c:	d1fc      	bne.n	c88 <_usart_init+0x4c>
     c8e:	2201      	movs	r2, #1
     c90:	69e3      	ldr	r3, [r4, #28]
     c92:	421a      	tst	r2, r3
     c94:	d1fc      	bne.n	c90 <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg = data;
     c96:	4b0e      	ldr	r3, [pc, #56]	; (cd0 <_usart_init+0x94>)
     c98:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     c9a:	2203      	movs	r2, #3
     c9c:	69e3      	ldr	r3, [r4, #28]
     c9e:	421a      	tst	r2, r3
     ca0:	d1fc      	bne.n	c9c <_usart_init+0x60>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     ca2:	23c0      	movs	r3, #192	; 0xc0
     ca4:	029b      	lsls	r3, r3, #10
     ca6:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     ca8:	2207      	movs	r2, #7
     caa:	69e3      	ldr	r3, [r4, #28]
     cac:	421a      	tst	r2, r3
     cae:	d1fc      	bne.n	caa <_usart_init+0x6e>
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
     cb0:	4b08      	ldr	r3, [pc, #32]	; (cd4 <_usart_init+0x98>)
     cb2:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
     cb4:	2300      	movs	r3, #0
     cb6:	73a3      	strb	r3, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     cb8:	2230      	movs	r2, #48	; 0x30
     cba:	54a3      	strb	r3, [r4, r2]

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);

	return ERR_NONE;
}
     cbc:	2000      	movs	r0, #0
     cbe:	bd10      	pop	{r4, pc}
     cc0:	bdfff800 	.word	0xbdfff800
     cc4:	0000023a 	.word	0x0000023a
     cc8:	00001c64 	.word	0x00001c64
     ccc:	00000999 	.word	0x00000999
     cd0:	40100004 	.word	0x40100004
     cd4:	ffffd8ad 	.word	0xffffd8ad

00000cd8 <_usart_sync_init>:
{
     cd8:	b570      	push	{r4, r5, r6, lr}
     cda:	0005      	movs	r5, r0
     cdc:	000c      	movs	r4, r1
	ASSERT(device);
     cde:	1e43      	subs	r3, r0, #1
     ce0:	4198      	sbcs	r0, r3
     ce2:	b2c0      	uxtb	r0, r0
     ce4:	22b4      	movs	r2, #180	; 0xb4
     ce6:	4904      	ldr	r1, [pc, #16]	; (cf8 <_usart_sync_init+0x20>)
     ce8:	4b04      	ldr	r3, [pc, #16]	; (cfc <_usart_sync_init+0x24>)
     cea:	4798      	blx	r3
	device->hw = hw;
     cec:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
     cee:	0020      	movs	r0, r4
     cf0:	4b03      	ldr	r3, [pc, #12]	; (d00 <_usart_sync_init+0x28>)
     cf2:	4798      	blx	r3
}
     cf4:	bd70      	pop	{r4, r5, r6, pc}
     cf6:	46c0      	nop			; (mov r8, r8)
     cf8:	00001c64 	.word	0x00001c64
     cfc:	00000999 	.word	0x00000999
     d00:	00000c3d 	.word	0x00000c3d

00000d04 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     d04:	6803      	ldr	r3, [r0, #0]
     d06:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
     d08:	8519      	strh	r1, [r3, #40]	; 0x28
}
     d0a:	4770      	bx	lr

00000d0c <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
     d0c:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
     d0e:	8d18      	ldrh	r0, [r3, #40]	; 0x28
     d10:	b2c0      	uxtb	r0, r0
}
     d12:	4770      	bx	lr

00000d14 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
     d14:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     d16:	7e18      	ldrb	r0, [r3, #24]
     d18:	2301      	movs	r3, #1
     d1a:	4018      	ands	r0, r3
}
     d1c:	4770      	bx	lr

00000d1e <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
     d1e:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     d20:	7e18      	ldrb	r0, [r3, #24]
     d22:	0780      	lsls	r0, r0, #30
     d24:	0fc0      	lsrs	r0, r0, #31
}
     d26:	4770      	bx	lr

00000d28 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
     d28:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     d2a:	7e18      	ldrb	r0, [r3, #24]
     d2c:	0740      	lsls	r0, r0, #29
     d2e:	0fc0      	lsrs	r0, r0, #31
}
     d30:	4770      	bx	lr
	...

00000d34 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
     d34:	4b0e      	ldr	r3, [pc, #56]	; (d70 <_sysctrl_init_sources+0x3c>)
     d36:	6a1a      	ldr	r2, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
     d38:	6a19      	ldr	r1, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
     d3a:	480e      	ldr	r0, [pc, #56]	; (d74 <_sysctrl_init_sources+0x40>)
     d3c:	4002      	ands	r2, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
     d3e:	0f89      	lsrs	r1, r1, #30
     d40:	0789      	lsls	r1, r1, #30
	hri_sysctrl_write_OSC8M_reg(hw,
     d42:	480d      	ldr	r0, [pc, #52]	; (d78 <_sysctrl_init_sources+0x44>)
     d44:	4301      	orrs	r1, r0
     d46:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
     d48:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     d4a:	699a      	ldr	r2, [r3, #24]
     d4c:	2102      	movs	r1, #2
     d4e:	430a      	orrs	r2, r1
     d50:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
     d52:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
     d54:	311d      	adds	r1, #29
     d56:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
     d58:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
     d5a:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
     d5c:	2208      	movs	r2, #8
     d5e:	68cb      	ldr	r3, [r1, #12]
     d60:	421a      	tst	r2, r3
     d62:	d0fc      	beq.n	d5e <_sysctrl_init_sources+0x2a>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
     d64:	4a02      	ldr	r2, [pc, #8]	; (d70 <_sysctrl_init_sources+0x3c>)
     d66:	6a13      	ldr	r3, [r2, #32]
     d68:	2180      	movs	r1, #128	; 0x80
     d6a:	430b      	orrs	r3, r1
     d6c:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
     d6e:	4770      	bx	lr
     d70:	40000800 	.word	0x40000800
     d74:	0fff0000 	.word	0x0fff0000
     d78:	00000302 	.word	0x00000302

00000d7c <_sysctrl_init_referenced_generators>:
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
     d7c:	4a02      	ldr	r2, [pc, #8]	; (d88 <_sysctrl_init_referenced_generators+0xc>)
     d7e:	6993      	ldr	r3, [r2, #24]
     d80:	2102      	movs	r1, #2
     d82:	438b      	bics	r3, r1
     d84:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
     d86:	4770      	bx	lr
     d88:	40000800 	.word	0x40000800

00000d8c <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
     d8c:	2000      	movs	r0, #0
     d8e:	4770      	bx	lr

00000d90 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
     d90:	b570      	push	{r4, r5, r6, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
     d92:	7c83      	ldrb	r3, [r0, #18]
     d94:	220f      	movs	r2, #15
     d96:	4013      	ands	r3, r2
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
     d98:	7cc1      	ldrb	r1, [r0, #19]

	if (!is_ctrl) {
     d9a:	3a08      	subs	r2, #8
     d9c:	400a      	ands	r2, r1
     d9e:	2a01      	cmp	r2, #1
     da0:	d00b      	beq.n	dba <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     da2:	015a      	lsls	r2, r3, #5
     da4:	4919      	ldr	r1, [pc, #100]	; (e0c <_usb_d_dev_handle_setup+0x7c>)
     da6:	468c      	mov	ip, r1
     da8:	4462      	add	r2, ip
     daa:	2110      	movs	r1, #16
     dac:	71d1      	strb	r1, [r2, #7]
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
     dae:	015b      	lsls	r3, r3, #5
     db0:	4a17      	ldr	r2, [pc, #92]	; (e10 <_usb_d_dev_handle_setup+0x80>)
     db2:	4694      	mov	ip, r2
     db4:	4463      	add	r3, ip
     db6:	7019      	strb	r1, [r3, #0]
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
}
     db8:	bd70      	pop	{r4, r5, r6, pc}
	if (_usb_d_dev_ep_is_busy(ept)) {
     dba:	064a      	lsls	r2, r1, #25
     dbc:	d50e      	bpl.n	ddc <_usb_d_dev_handle_setup+0x4c>
		ept->flags.bits.is_busy = 0;
     dbe:	7cc2      	ldrb	r2, [r0, #19]
     dc0:	2140      	movs	r1, #64	; 0x40
     dc2:	438a      	bics	r2, r1
     dc4:	74c2      	strb	r2, [r0, #19]
     dc6:	015a      	lsls	r2, r3, #5
     dc8:	4c12      	ldr	r4, [pc, #72]	; (e14 <_usb_d_dev_handle_setup+0x84>)
     dca:	46a4      	mov	ip, r4
     dcc:	4462      	add	r2, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
     dce:	2580      	movs	r5, #128	; 0x80
     dd0:	2482      	movs	r4, #130	; 0x82
     dd2:	0064      	lsls	r4, r4, #1
     dd4:	5515      	strb	r5, [r2, r4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
     dd6:	2406      	movs	r4, #6
     dd8:	34ff      	adds	r4, #255	; 0xff
     dda:	5511      	strb	r1, [r2, r4]
	ept->flags.bits.is_stalled = 0;
     ddc:	7cc2      	ldrb	r2, [r0, #19]
     dde:	2108      	movs	r1, #8
     de0:	438a      	bics	r2, r1
     de2:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
     de4:	490c      	ldr	r1, [pc, #48]	; (e18 <_usb_d_dev_handle_setup+0x88>)
     de6:	015a      	lsls	r2, r3, #5
     de8:	188c      	adds	r4, r1, r2
     dea:	2500      	movs	r5, #0
     dec:	72a5      	strb	r5, [r4, #10]
     dee:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     df0:	0013      	movs	r3, r2
     df2:	4c06      	ldr	r4, [pc, #24]	; (e0c <_usb_d_dev_handle_setup+0x7c>)
     df4:	46a4      	mov	ip, r4
     df6:	4463      	add	r3, ip
     df8:	246f      	movs	r4, #111	; 0x6f
     dfa:	71dc      	strb	r4, [r3, #7]
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     dfc:	4b04      	ldr	r3, [pc, #16]	; (e10 <_usb_d_dev_handle_setup+0x80>)
     dfe:	469c      	mov	ip, r3
     e00:	4462      	add	r2, ip
     e02:	7014      	strb	r4, [r2, #0]
	dev_inst.ep_callbacks.setup(ept->ep);
     e04:	7c80      	ldrb	r0, [r0, #18]
     e06:	6e8b      	ldr	r3, [r1, #104]	; 0x68
     e08:	4798      	blx	r3
     e0a:	e7d5      	b.n	db8 <_usb_d_dev_handle_setup+0x28>
     e0c:	41005100 	.word	0x41005100
     e10:	41005108 	.word	0x41005108
     e14:	41005000 	.word	0x41005000
     e18:	200000a0 	.word	0x200000a0

00000e1c <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
     e1c:	b510      	push	{r4, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
     e1e:	2220      	movs	r2, #32
     e20:	408a      	lsls	r2, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
     e22:	b2d2      	uxtb	r2, r2
	uint8_t epn = USB_EP_GET_N(ept->ep);
     e24:	7c81      	ldrb	r1, [r0, #18]
     e26:	230f      	movs	r3, #15
     e28:	400b      	ands	r3, r1
     e2a:	015b      	lsls	r3, r3, #5
     e2c:	4905      	ldr	r1, [pc, #20]	; (e44 <_usb_d_dev_handle_stall+0x28>)
     e2e:	468c      	mov	ip, r1
     e30:	4463      	add	r3, ip
     e32:	701a      	strb	r2, [r3, #0]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
     e34:	6882      	ldr	r2, [r0, #8]
     e36:	7c80      	ldrb	r0, [r0, #18]
     e38:	4b03      	ldr	r3, [pc, #12]	; (e48 <_usb_d_dev_handle_stall+0x2c>)
     e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
     e3c:	2101      	movs	r1, #1
     e3e:	4798      	blx	r3
}
     e40:	bd10      	pop	{r4, pc}
     e42:	46c0      	nop			; (mov r8, r8)
     e44:	41005108 	.word	0x41005108
     e48:	200000a0 	.word	0x200000a0

00000e4c <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
     e4c:	b510      	push	{r4, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
     e4e:	7c83      	ldrb	r3, [r0, #18]
     e50:	2bff      	cmp	r3, #255	; 0xff
     e52:	d002      	beq.n	e5a <_usb_d_dev_trans_done+0xe>
     e54:	7cc2      	ldrb	r2, [r0, #19]
     e56:	0652      	lsls	r2, r2, #25
     e58:	d400      	bmi.n	e5c <_usb_d_dev_trans_done+0x10>
		return;
	}
	ept->flags.bits.is_busy = 0;
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
}
     e5a:	bd10      	pop	{r4, pc}
	ept->flags.bits.is_busy = 0;
     e5c:	7cc2      	ldrb	r2, [r0, #19]
     e5e:	2440      	movs	r4, #64	; 0x40
     e60:	43a2      	bics	r2, r4
     e62:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
     e64:	6882      	ldr	r2, [r0, #8]
     e66:	4802      	ldr	r0, [pc, #8]	; (e70 <_usb_d_dev_trans_done+0x24>)
     e68:	6f04      	ldr	r4, [r0, #112]	; 0x70
     e6a:	0018      	movs	r0, r3
     e6c:	47a0      	blx	r4
     e6e:	e7f4      	b.n	e5a <_usb_d_dev_trans_done+0xe>
     e70:	200000a0 	.word	0x200000a0

00000e74 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
     e74:	b530      	push	{r4, r5, lr}
     e76:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
     e78:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
     e7a:	ac01      	add	r4, sp, #4
     e7c:	2525      	movs	r5, #37	; 0x25
     e7e:	7025      	strb	r5, [r4, #0]
     e80:	3525      	adds	r5, #37	; 0x25
     e82:	7065      	strb	r5, [r4, #1]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
     e84:	2bff      	cmp	r3, #255	; 0xff
     e86:	d01b      	beq.n	ec0 <_usb_d_dev_trans_stop+0x4c>
     e88:	7cc4      	ldrb	r4, [r0, #19]
     e8a:	0664      	lsls	r4, r4, #25
     e8c:	d518      	bpl.n	ec0 <_usb_d_dev_trans_stop+0x4c>
	uint8_t epn = USB_EP_GET_N(ept->ep);
     e8e:	240f      	movs	r4, #15
     e90:	4023      	ands	r3, r4
		return;
	}
	/* Stop transfer */
	if (dir) {
     e92:	2900      	cmp	r1, #0
     e94:	d016      	beq.n	ec4 <_usb_d_dev_trans_stop+0x50>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
     e96:	015c      	lsls	r4, r3, #5
     e98:	4d0e      	ldr	r5, [pc, #56]	; (ed4 <_usb_d_dev_trans_stop+0x60>)
     e9a:	46ac      	mov	ip, r5
     e9c:	4464      	add	r4, ip
     e9e:	2580      	movs	r5, #128	; 0x80
     ea0:	7125      	strb	r5, [r4, #4]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
     ea2:	ac01      	add	r4, sp, #4
     ea4:	5c64      	ldrb	r4, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     ea6:	0159      	lsls	r1, r3, #5
     ea8:	4d0a      	ldr	r5, [pc, #40]	; (ed4 <_usb_d_dev_trans_stop+0x60>)
     eaa:	46ac      	mov	ip, r5
     eac:	4461      	add	r1, ip
     eae:	71cc      	strb	r4, [r1, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     eb0:	015b      	lsls	r3, r3, #5
     eb2:	4909      	ldr	r1, [pc, #36]	; (ed8 <_usb_d_dev_trans_stop+0x64>)
     eb4:	468c      	mov	ip, r1
     eb6:	4463      	add	r3, ip
     eb8:	701c      	strb	r4, [r3, #0]
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
     eba:	0011      	movs	r1, r2
     ebc:	4b07      	ldr	r3, [pc, #28]	; (edc <_usb_d_dev_trans_stop+0x68>)
     ebe:	4798      	blx	r3
}
     ec0:	b003      	add	sp, #12
     ec2:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
     ec4:	015c      	lsls	r4, r3, #5
     ec6:	4d03      	ldr	r5, [pc, #12]	; (ed4 <_usb_d_dev_trans_stop+0x60>)
     ec8:	46ac      	mov	ip, r5
     eca:	4464      	add	r4, ip
     ecc:	2540      	movs	r5, #64	; 0x40
     ece:	7165      	strb	r5, [r4, #5]
     ed0:	e7e7      	b.n	ea2 <_usb_d_dev_trans_stop+0x2e>
     ed2:	46c0      	nop			; (mov r8, r8)
     ed4:	41005100 	.word	0x41005100
     ed8:	41005108 	.word	0x41005108
     edc:	00000e4d 	.word	0x00000e4d

00000ee0 <_usb_d_dev_handle_trfail>:
{
     ee0:	b570      	push	{r4, r5, r6, lr}
     ee2:	b082      	sub	sp, #8
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
     ee4:	7c83      	ldrb	r3, [r0, #18]
     ee6:	220f      	movs	r2, #15
     ee8:	4013      	ands	r3, r2
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
     eea:	aa01      	add	r2, sp, #4
     eec:	2404      	movs	r4, #4
     eee:	7014      	strb	r4, [r2, #0]
     ef0:	3404      	adds	r4, #4
     ef2:	7054      	strb	r4, [r2, #1]
     ef4:	015d      	lsls	r5, r3, #5
	uint8_t            eptype
     ef6:	2900      	cmp	r1, #0
     ef8:	d031      	beq.n	f5e <_usb_d_dev_handle_trfail+0x7e>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
     efa:	001a      	movs	r2, r3
     efc:	3208      	adds	r2, #8
     efe:	0152      	lsls	r2, r2, #5
     f00:	4c32      	ldr	r4, [pc, #200]	; (fcc <_usb_d_dev_handle_trfail+0xec>)
     f02:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
     f04:	0664      	lsls	r4, r4, #25
     f06:	0f64      	lsrs	r4, r4, #29
	st.reg = bank[bank_n].STATUS_BK.reg;
     f08:	010a      	lsls	r2, r1, #4
     f0a:	1952      	adds	r2, r2, r5
     f0c:	4d30      	ldr	r5, [pc, #192]	; (fd0 <_usb_d_dev_handle_trfail+0xf0>)
     f0e:	18aa      	adds	r2, r5, r2
     f10:	7a95      	ldrb	r5, [r2, #10]
     f12:	b2ed      	uxtb	r5, r5
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
     f14:	2c02      	cmp	r4, #2
     f16:	d02a      	beq.n	f6e <_usb_d_dev_handle_trfail+0x8e>
	} else if (st.bit.ERRORFLOW) {
     f18:	07ac      	lsls	r4, r5, #30
     f1a:	d541      	bpl.n	fa0 <_usb_d_dev_handle_trfail+0xc0>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
     f1c:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
     f1e:	7a94      	ldrb	r4, [r2, #10]
     f20:	2602      	movs	r6, #2
     f22:	43b4      	bics	r4, r6
     f24:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
     f26:	aa01      	add	r2, sp, #4
     f28:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     f2a:	015a      	lsls	r2, r3, #5
     f2c:	4e29      	ldr	r6, [pc, #164]	; (fd4 <_usb_d_dev_handle_trfail+0xf4>)
     f2e:	46b4      	mov	ip, r6
     f30:	4462      	add	r2, ip
     f32:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     f34:	015b      	lsls	r3, r3, #5
     f36:	4a28      	ldr	r2, [pc, #160]	; (fd8 <_usb_d_dev_handle_trfail+0xf8>)
     f38:	4694      	mov	ip, r2
     f3a:	4463      	add	r3, ip
     f3c:	701c      	strb	r4, [r3, #0]
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
     f3e:	2307      	movs	r3, #7
     f40:	402b      	ands	r3, r5
     f42:	2b01      	cmp	r3, #1
     f44:	d13f      	bne.n	fc6 <_usb_d_dev_handle_trfail+0xe6>
     f46:	7cc3      	ldrb	r3, [r0, #19]
     f48:	065b      	lsls	r3, r3, #25
     f4a:	d53c      	bpl.n	fc6 <_usb_d_dev_handle_trfail+0xe6>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
     f4c:	7cc3      	ldrb	r3, [r0, #19]
     f4e:	09db      	lsrs	r3, r3, #7
     f50:	4299      	cmp	r1, r3
     f52:	d038      	beq.n	fc6 <_usb_d_dev_handle_trfail+0xe6>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
     f54:	2200      	movs	r2, #0
     f56:	0019      	movs	r1, r3
     f58:	4b20      	ldr	r3, [pc, #128]	; (fdc <_usb_d_dev_handle_trfail+0xfc>)
     f5a:	4798      	blx	r3
     f5c:	e033      	b.n	fc6 <_usb_d_dev_handle_trfail+0xe6>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
     f5e:	001a      	movs	r2, r3
     f60:	3208      	adds	r2, #8
     f62:	0152      	lsls	r2, r2, #5
     f64:	4c19      	ldr	r4, [pc, #100]	; (fcc <_usb_d_dev_handle_trfail+0xec>)
     f66:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
     f68:	2207      	movs	r2, #7
     f6a:	4014      	ands	r4, r2
     f6c:	e7cc      	b.n	f08 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
     f6e:	07ec      	lsls	r4, r5, #31
     f70:	d5d2      	bpl.n	f18 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
     f72:	7a94      	ldrb	r4, [r2, #10]
     f74:	2501      	movs	r5, #1
     f76:	43ac      	bics	r4, r5
     f78:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
     f7a:	aa01      	add	r2, sp, #4
     f7c:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     f7e:	015a      	lsls	r2, r3, #5
     f80:	4d14      	ldr	r5, [pc, #80]	; (fd4 <_usb_d_dev_handle_trfail+0xf4>)
     f82:	46ac      	mov	ip, r5
     f84:	4462      	add	r2, ip
     f86:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     f88:	015b      	lsls	r3, r3, #5
     f8a:	4a13      	ldr	r2, [pc, #76]	; (fd8 <_usb_d_dev_handle_trfail+0xf8>)
     f8c:	4694      	mov	ip, r2
     f8e:	4463      	add	r3, ip
     f90:	701c      	strb	r4, [r3, #0]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
     f92:	1e4b      	subs	r3, r1, #1
     f94:	4199      	sbcs	r1, r3
     f96:	b2c9      	uxtb	r1, r1
     f98:	2204      	movs	r2, #4
     f9a:	4b10      	ldr	r3, [pc, #64]	; (fdc <_usb_d_dev_handle_trfail+0xfc>)
     f9c:	4798      	blx	r3
     f9e:	e012      	b.n	fc6 <_usb_d_dev_handle_trfail+0xe6>
	bank->STATUS_BK.reg     = 0;
     fa0:	005a      	lsls	r2, r3, #1
     fa2:	1852      	adds	r2, r2, r1
     fa4:	0112      	lsls	r2, r2, #4
     fa6:	480a      	ldr	r0, [pc, #40]	; (fd0 <_usb_d_dev_handle_trfail+0xf0>)
     fa8:	1882      	adds	r2, r0, r2
     faa:	2000      	movs	r0, #0
     fac:	7290      	strb	r0, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
     fae:	aa01      	add	r2, sp, #4
     fb0:	5c51      	ldrb	r1, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     fb2:	015a      	lsls	r2, r3, #5
     fb4:	4807      	ldr	r0, [pc, #28]	; (fd4 <_usb_d_dev_handle_trfail+0xf4>)
     fb6:	4684      	mov	ip, r0
     fb8:	4462      	add	r2, ip
     fba:	71d1      	strb	r1, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     fbc:	015b      	lsls	r3, r3, #5
     fbe:	4a06      	ldr	r2, [pc, #24]	; (fd8 <_usb_d_dev_handle_trfail+0xf8>)
     fc0:	4694      	mov	ip, r2
     fc2:	4463      	add	r3, ip
     fc4:	7019      	strb	r1, [r3, #0]
}
     fc6:	b002      	add	sp, #8
     fc8:	bd70      	pop	{r4, r5, r6, pc}
     fca:	46c0      	nop			; (mov r8, r8)
     fcc:	41005000 	.word	0x41005000
     fd0:	200000a0 	.word	0x200000a0
     fd4:	41005100 	.word	0x41005100
     fd8:	41005108 	.word	0x41005108
     fdc:	00000e75 	.word	0x00000e75

00000fe0 <_usb_d_dev_reset_epts>:
{
     fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
     fe2:	46c6      	mov	lr, r8
     fe4:	b500      	push	{lr}
     fe6:	4d0c      	ldr	r5, [pc, #48]	; (1018 <_usb_d_dev_reset_epts+0x38>)
     fe8:	002c      	movs	r4, r5
     fea:	3474      	adds	r4, #116	; 0x74
     fec:	3529      	adds	r5, #41	; 0x29
     fee:	35ff      	adds	r5, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
     ff0:	4b0a      	ldr	r3, [pc, #40]	; (101c <_usb_d_dev_reset_epts+0x3c>)
     ff2:	4698      	mov	r8, r3
		dev_inst.ep[i].ep       = 0xFF;
     ff4:	27ff      	movs	r7, #255	; 0xff
		dev_inst.ep[i].flags.u8 = 0;
     ff6:	2600      	movs	r6, #0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
     ff8:	2103      	movs	r1, #3
     ffa:	0020      	movs	r0, r4
     ffc:	47c0      	blx	r8
		dev_inst.ep[i].ep       = 0xFF;
     ffe:	74a7      	strb	r7, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    1000:	74e6      	strb	r6, [r4, #19]
    1002:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    1004:	42ac      	cmp	r4, r5
    1006:	d1f7      	bne.n	ff8 <_usb_d_dev_reset_epts+0x18>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    1008:	2260      	movs	r2, #96	; 0x60
    100a:	2100      	movs	r1, #0
    100c:	4802      	ldr	r0, [pc, #8]	; (1018 <_usb_d_dev_reset_epts+0x38>)
    100e:	4b04      	ldr	r3, [pc, #16]	; (1020 <_usb_d_dev_reset_epts+0x40>)
    1010:	4798      	blx	r3
}
    1012:	bc04      	pop	{r2}
    1014:	4690      	mov	r8, r2
    1016:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1018:	200000a0 	.word	0x200000a0
    101c:	00000e4d 	.word	0x00000e4d
    1020:	00001b97 	.word	0x00001b97

00001024 <_usb_d_dev_in_next>:
{
    1024:	b5f0      	push	{r4, r5, r6, r7, lr}
    1026:	46c6      	mov	lr, r8
    1028:	b500      	push	{lr}
    102a:	0004      	movs	r4, r0
    102c:	000e      	movs	r6, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    102e:	7c83      	ldrb	r3, [r0, #18]
    1030:	250f      	movs	r5, #15
    1032:	401d      	ands	r5, r3
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    1034:	2900      	cmp	r1, #0
    1036:	d100      	bne.n	103a <_usb_d_dev_in_next+0x16>
    1038:	e0aa      	b.n	1190 <_usb_d_dev_in_next+0x16c>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    103a:	016a      	lsls	r2, r5, #5
    103c:	4b5a      	ldr	r3, [pc, #360]	; (11a8 <_usb_d_dev_in_next+0x184>)
    103e:	189b      	adds	r3, r3, r2
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    1040:	6958      	ldr	r0, [r3, #20]
    1042:	0480      	lsls	r0, r0, #18
    1044:	0c80      	lsrs	r0, r0, #18
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1046:	8a23      	ldrh	r3, [r4, #16]
    1048:	4a58      	ldr	r2, [pc, #352]	; (11ac <_usb_d_dev_in_next+0x188>)
    104a:	4293      	cmp	r3, r2
    104c:	d100      	bne.n	1050 <_usb_d_dev_in_next+0x2c>
    104e:	e09a      	b.n	1186 <_usb_d_dev_in_next+0x162>
    1050:	3b01      	subs	r3, #1
    1052:	b29a      	uxth	r2, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1054:	7ce3      	ldrb	r3, [r4, #19]
    1056:	2707      	movs	r7, #7
    1058:	401f      	ands	r7, r3
	if (isr) {
    105a:	2e00      	cmp	r6, #0
    105c:	d005      	beq.n	106a <_usb_d_dev_in_next+0x46>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    105e:	016b      	lsls	r3, r5, #5
    1060:	4953      	ldr	r1, [pc, #332]	; (11b0 <_usb_d_dev_in_next+0x18c>)
    1062:	468c      	mov	ip, r1
    1064:	4463      	add	r3, ip
    1066:	2102      	movs	r1, #2
    1068:	71d9      	strb	r1, [r3, #7]
	ept->trans_count += trans_count;
    106a:	68a3      	ldr	r3, [r4, #8]
    106c:	18c1      	adds	r1, r0, r3
    106e:	60a1      	str	r1, [r4, #8]
	if (ept->trans_count < ept->trans_size) {
    1070:	6863      	ldr	r3, [r4, #4]
    1072:	4299      	cmp	r1, r3
    1074:	d24a      	bcs.n	110c <_usb_d_dev_in_next+0xe8>
		trans_next = ept->trans_size - ept->trans_count;
    1076:	1a5b      	subs	r3, r3, r1
    1078:	b29b      	uxth	r3, r3
		if (ept->flags.bits.use_cache) {
    107a:	7ce2      	ldrb	r2, [r4, #19]
    107c:	0692      	lsls	r2, r2, #26
    107e:	d535      	bpl.n	10ec <_usb_d_dev_in_next+0xc8>
    1080:	8a22      	ldrh	r2, [r4, #16]
    1082:	1c10      	adds	r0, r2, #0
    1084:	b292      	uxth	r2, r2
    1086:	429a      	cmp	r2, r3
    1088:	d900      	bls.n	108c <_usb_d_dev_in_next+0x68>
    108a:	1c18      	adds	r0, r3, #0
    108c:	b283      	uxth	r3, r0
    108e:	4698      	mov	r8, r3
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    1090:	6823      	ldr	r3, [r4, #0]
    1092:	469c      	mov	ip, r3
    1094:	4461      	add	r1, ip
    1096:	4642      	mov	r2, r8
    1098:	68e0      	ldr	r0, [r4, #12]
    109a:	4b46      	ldr	r3, [pc, #280]	; (11b4 <_usb_d_dev_in_next+0x190>)
    109c:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    109e:	68e1      	ldr	r1, [r4, #12]
	bank->ADDR.reg          = addr;
    10a0:	016a      	lsls	r2, r5, #5
    10a2:	4b41      	ldr	r3, [pc, #260]	; (11a8 <_usb_d_dev_in_next+0x184>)
    10a4:	189b      	adds	r3, r3, r2
    10a6:	6119      	str	r1, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    10a8:	016a      	lsls	r2, r5, #5
    10aa:	4b3f      	ldr	r3, [pc, #252]	; (11a8 <_usb_d_dev_in_next+0x184>)
    10ac:	189b      	adds	r3, r3, r2
    10ae:	695a      	ldr	r2, [r3, #20]
    10b0:	4641      	mov	r1, r8
    10b2:	0489      	lsls	r1, r1, #18
    10b4:	0c89      	lsrs	r1, r1, #18
    10b6:	0b92      	lsrs	r2, r2, #14
    10b8:	0392      	lsls	r2, r2, #14
    10ba:	430a      	orrs	r2, r1
    10bc:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    10be:	695a      	ldr	r2, [r3, #20]
    10c0:	493d      	ldr	r1, [pc, #244]	; (11b8 <_usb_d_dev_in_next+0x194>)
    10c2:	400a      	ands	r2, r1
    10c4:	615a      	str	r2, [r3, #20]
	if (!isr) {
    10c6:	2e00      	cmp	r6, #0
    10c8:	d107      	bne.n	10da <_usb_d_dev_in_next+0xb6>
		if (is_ctrl) {
    10ca:	2f01      	cmp	r7, #1
    10cc:	d059      	beq.n	1182 <_usb_d_dev_in_next+0x15e>
			inten = USB_D_BANK1_INT_FLAGS;
    10ce:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    10d0:	016b      	lsls	r3, r5, #5
    10d2:	493a      	ldr	r1, [pc, #232]	; (11bc <_usb_d_dev_in_next+0x198>)
    10d4:	468c      	mov	ip, r1
    10d6:	4463      	add	r3, ip
    10d8:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    10da:	016d      	lsls	r5, r5, #5
    10dc:	4b34      	ldr	r3, [pc, #208]	; (11b0 <_usb_d_dev_in_next+0x18c>)
    10de:	469c      	mov	ip, r3
    10e0:	4465      	add	r5, ip
    10e2:	2380      	movs	r3, #128	; 0x80
    10e4:	716b      	strb	r3, [r5, #5]
}
    10e6:	bc04      	pop	{r2}
    10e8:	4690      	mov	r8, r2
    10ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10ec:	1c1a      	adds	r2, r3, #0
    10ee:	2080      	movs	r0, #128	; 0x80
    10f0:	0180      	lsls	r0, r0, #6
    10f2:	4283      	cmp	r3, r0
    10f4:	d901      	bls.n	10fa <_usb_d_dev_in_next+0xd6>
    10f6:	4b32      	ldr	r3, [pc, #200]	; (11c0 <_usb_d_dev_in_next+0x19c>)
    10f8:	881a      	ldrh	r2, [r3, #0]
    10fa:	b293      	uxth	r3, r2
    10fc:	4698      	mov	r8, r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    10fe:	6823      	ldr	r3, [r4, #0]
    1100:	1859      	adds	r1, r3, r1
	bank->ADDR.reg          = addr;
    1102:	016a      	lsls	r2, r5, #5
    1104:	4b28      	ldr	r3, [pc, #160]	; (11a8 <_usb_d_dev_in_next+0x184>)
    1106:	189b      	adds	r3, r3, r2
    1108:	6119      	str	r1, [r3, #16]
    110a:	e7cd      	b.n	10a8 <_usb_d_dev_in_next+0x84>
	} else if (ept->flags.bits.need_zlp) {
    110c:	7ce3      	ldrb	r3, [r4, #19]
    110e:	06db      	lsls	r3, r3, #27
    1110:	d50f      	bpl.n	1132 <_usb_d_dev_in_next+0x10e>
		ept->flags.bits.need_zlp = 0;
    1112:	7ce3      	ldrb	r3, [r4, #19]
    1114:	2210      	movs	r2, #16
    1116:	4393      	bics	r3, r2
    1118:	74e3      	strb	r3, [r4, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    111a:	016a      	lsls	r2, r5, #5
    111c:	4b22      	ldr	r3, [pc, #136]	; (11a8 <_usb_d_dev_in_next+0x184>)
    111e:	189b      	adds	r3, r3, r2
    1120:	695a      	ldr	r2, [r3, #20]
    1122:	0b92      	lsrs	r2, r2, #14
    1124:	0392      	lsls	r2, r2, #14
    1126:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    1128:	695a      	ldr	r2, [r3, #20]
    112a:	4923      	ldr	r1, [pc, #140]	; (11b8 <_usb_d_dev_in_next+0x194>)
    112c:	400a      	ands	r2, r1
    112e:	615a      	str	r2, [r3, #20]
    1130:	e7c9      	b.n	10c6 <_usb_d_dev_in_next+0xa2>
	if (is_ctrl) {
    1132:	2f01      	cmp	r7, #1
    1134:	d00e      	beq.n	1154 <_usb_d_dev_in_next+0x130>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1136:	016d      	lsls	r5, r5, #5
    1138:	4b22      	ldr	r3, [pc, #136]	; (11c4 <_usb_d_dev_in_next+0x1a0>)
    113a:	469c      	mov	ip, r3
    113c:	4465      	add	r5, ip
    113e:	234a      	movs	r3, #74	; 0x4a
    1140:	702b      	strb	r3, [r5, #0]
	if (last_pkt == ept->size) {
    1142:	8a21      	ldrh	r1, [r4, #16]
    1144:	4002      	ands	r2, r0
    1146:	4291      	cmp	r1, r2
    1148:	d00b      	beq.n	1162 <_usb_d_dev_in_next+0x13e>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    114a:	2100      	movs	r1, #0
    114c:	0020      	movs	r0, r4
    114e:	4b1e      	ldr	r3, [pc, #120]	; (11c8 <_usb_d_dev_in_next+0x1a4>)
    1150:	4798      	blx	r3
	return;
    1152:	e7c8      	b.n	10e6 <_usb_d_dev_in_next+0xc2>
    1154:	016d      	lsls	r5, r5, #5
    1156:	4b1b      	ldr	r3, [pc, #108]	; (11c4 <_usb_d_dev_in_next+0x1a0>)
    1158:	469c      	mov	ip, r3
    115a:	4465      	add	r5, ip
    115c:	234b      	movs	r3, #75	; 0x4b
    115e:	702b      	strb	r3, [r5, #0]
    1160:	e7ef      	b.n	1142 <_usb_d_dev_in_next+0x11e>
		ept->flags.bits.is_busy = 0;
    1162:	7ce3      	ldrb	r3, [r4, #19]
    1164:	2240      	movs	r2, #64	; 0x40
    1166:	4393      	bics	r3, r2
    1168:	74e3      	strb	r3, [r4, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    116a:	7ca0      	ldrb	r0, [r4, #18]
    116c:	4b0e      	ldr	r3, [pc, #56]	; (11a8 <_usb_d_dev_in_next+0x184>)
    116e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    1170:	68a1      	ldr	r1, [r4, #8]
    1172:	4798      	blx	r3
    1174:	2800      	cmp	r0, #0
    1176:	d1b6      	bne.n	10e6 <_usb_d_dev_in_next+0xc2>
		ept->flags.bits.is_busy = 1;
    1178:	7ce3      	ldrb	r3, [r4, #19]
    117a:	2240      	movs	r2, #64	; 0x40
    117c:	4313      	orrs	r3, r2
    117e:	74e3      	strb	r3, [r4, #19]
    1180:	e7e3      	b.n	114a <_usb_d_dev_in_next+0x126>
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    1182:	224e      	movs	r2, #78	; 0x4e
    1184:	e7a4      	b.n	10d0 <_usb_d_dev_in_next+0xac>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1186:	7ce7      	ldrb	r7, [r4, #19]
    1188:	2307      	movs	r3, #7
    118a:	401f      	ands	r7, r3
    118c:	4a07      	ldr	r2, [pc, #28]	; (11ac <_usb_d_dev_in_next+0x188>)
    118e:	e766      	b.n	105e <_usb_d_dev_in_next+0x3a>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1190:	8a03      	ldrh	r3, [r0, #16]
    1192:	4a06      	ldr	r2, [pc, #24]	; (11ac <_usb_d_dev_in_next+0x188>)
    1194:	2000      	movs	r0, #0
    1196:	4293      	cmp	r3, r2
    1198:	d000      	beq.n	119c <_usb_d_dev_in_next+0x178>
    119a:	e759      	b.n	1050 <_usb_d_dev_in_next+0x2c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    119c:	7ce3      	ldrb	r3, [r4, #19]
    119e:	2707      	movs	r7, #7
    11a0:	401f      	ands	r7, r3
    11a2:	2000      	movs	r0, #0
    11a4:	4a01      	ldr	r2, [pc, #4]	; (11ac <_usb_d_dev_in_next+0x188>)
    11a6:	e760      	b.n	106a <_usb_d_dev_in_next+0x46>
    11a8:	200000a0 	.word	0x200000a0
    11ac:	000003ff 	.word	0x000003ff
    11b0:	41005100 	.word	0x41005100
    11b4:	00001b85 	.word	0x00001b85
    11b8:	f0003fff 	.word	0xf0003fff
    11bc:	41005109 	.word	0x41005109
    11c0:	00001c80 	.word	0x00001c80
    11c4:	41005108 	.word	0x41005108
    11c8:	00000e4d 	.word	0x00000e4d

000011cc <_usb_d_dev_out_next>:
{
    11cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11ce:	46de      	mov	lr, fp
    11d0:	4657      	mov	r7, sl
    11d2:	464e      	mov	r6, r9
    11d4:	4645      	mov	r5, r8
    11d6:	b5e0      	push	{r5, r6, r7, lr}
    11d8:	0004      	movs	r4, r0
    11da:	4688      	mov	r8, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    11dc:	7c83      	ldrb	r3, [r0, #18]
    11de:	250f      	movs	r5, #15
    11e0:	401d      	ands	r5, r3
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    11e2:	2900      	cmp	r1, #0
    11e4:	d057      	beq.n	1296 <_usb_d_dev_out_next+0xca>
    11e6:	016a      	lsls	r2, r5, #5
    11e8:	4b7d      	ldr	r3, [pc, #500]	; (13e0 <_usb_d_dev_out_next+0x214>)
    11ea:	189b      	adds	r3, r3, r2
    11ec:	685a      	ldr	r2, [r3, #4]
    11ee:	0112      	lsls	r2, r2, #4
    11f0:	0c92      	lsrs	r2, r2, #18
    11f2:	4692      	mov	sl, r2
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    11f4:	685f      	ldr	r7, [r3, #4]
    11f6:	04bf      	lsls	r7, r7, #18
    11f8:	0cbf      	lsrs	r7, r7, #18
    11fa:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    11fc:	8a06      	ldrh	r6, [r0, #16]
    11fe:	4b79      	ldr	r3, [pc, #484]	; (13e4 <_usb_d_dev_out_next+0x218>)
    1200:	429e      	cmp	r6, r3
    1202:	d100      	bne.n	1206 <_usb_d_dev_out_next+0x3a>
    1204:	e0cd      	b.n	13a2 <_usb_d_dev_out_next+0x1d6>
    1206:	3e01      	subs	r6, #1
    1208:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    120a:	465f      	mov	r7, fp
    120c:	4037      	ands	r7, r6
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    120e:	7ce3      	ldrb	r3, [r4, #19]
    1210:	2207      	movs	r2, #7
    1212:	401a      	ands	r2, r3
    1214:	4691      	mov	r9, r2
	if (isr) {
    1216:	4643      	mov	r3, r8
    1218:	2b00      	cmp	r3, #0
    121a:	d005      	beq.n	1228 <_usb_d_dev_out_next+0x5c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    121c:	016b      	lsls	r3, r5, #5
    121e:	4a72      	ldr	r2, [pc, #456]	; (13e8 <_usb_d_dev_out_next+0x21c>)
    1220:	4694      	mov	ip, r2
    1222:	4463      	add	r3, ip
    1224:	2201      	movs	r2, #1
    1226:	71da      	strb	r2, [r3, #7]
	if (ept->flags.bits.use_cache && ept->trans_size) {
    1228:	7ce3      	ldrb	r3, [r4, #19]
    122a:	069b      	lsls	r3, r3, #26
    122c:	d50f      	bpl.n	124e <_usb_d_dev_out_next+0x82>
    122e:	6863      	ldr	r3, [r4, #4]
    1230:	2b00      	cmp	r3, #0
    1232:	d039      	beq.n	12a8 <_usb_d_dev_out_next+0xdc>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    1234:	68a0      	ldr	r0, [r4, #8]
    1236:	1a1b      	subs	r3, r3, r0
    1238:	b29b      	uxth	r3, r3
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    123a:	6822      	ldr	r2, [r4, #0]
    123c:	4694      	mov	ip, r2
    123e:	4460      	add	r0, ip
    1240:	68e1      	ldr	r1, [r4, #12]
    1242:	001a      	movs	r2, r3
    1244:	42bb      	cmp	r3, r7
    1246:	d900      	bls.n	124a <_usb_d_dev_out_next+0x7e>
    1248:	003a      	movs	r2, r7
    124a:	4b68      	ldr	r3, [pc, #416]	; (13ec <_usb_d_dev_out_next+0x220>)
    124c:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    124e:	6863      	ldr	r3, [r4, #4]
    1250:	2b00      	cmp	r3, #0
    1252:	d029      	beq.n	12a8 <_usb_d_dev_out_next+0xdc>
	} else if (isr && last_pkt < ept->size) {
    1254:	4642      	mov	r2, r8
    1256:	2a00      	cmp	r2, #0
    1258:	d042      	beq.n	12e0 <_usb_d_dev_out_next+0x114>
    125a:	8a22      	ldrh	r2, [r4, #16]
    125c:	42ba      	cmp	r2, r7
    125e:	d93f      	bls.n	12e0 <_usb_d_dev_out_next+0x114>
		ept->flags.bits.need_zlp = 0;
    1260:	7ce3      	ldrb	r3, [r4, #19]
    1262:	2210      	movs	r2, #16
    1264:	4393      	bics	r3, r2
    1266:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    1268:	68a3      	ldr	r3, [r4, #8]
    126a:	445b      	add	r3, fp
    126c:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    126e:	464b      	mov	r3, r9
    1270:	2b01      	cmp	r3, #1
    1272:	d100      	bne.n	1276 <_usb_d_dev_out_next+0xaa>
    1274:	e087      	b.n	1386 <_usb_d_dev_out_next+0x1ba>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1276:	016b      	lsls	r3, r5, #5
    1278:	4a5d      	ldr	r2, [pc, #372]	; (13f0 <_usb_d_dev_out_next+0x224>)
    127a:	4694      	mov	ip, r2
    127c:	4463      	add	r3, ip
    127e:	2225      	movs	r2, #37	; 0x25
    1280:	701a      	strb	r2, [r3, #0]
	if (0 == epn) {
    1282:	2d00      	cmp	r5, #0
    1284:	d102      	bne.n	128c <_usb_d_dev_out_next+0xc0>
	bank->ADDR.reg          = addr;
    1286:	4b56      	ldr	r3, [pc, #344]	; (13e0 <_usb_d_dev_out_next+0x214>)
    1288:	68e2      	ldr	r2, [r4, #12]
    128a:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    128c:	2100      	movs	r1, #0
    128e:	0020      	movs	r0, r4
    1290:	4b58      	ldr	r3, [pc, #352]	; (13f4 <_usb_d_dev_out_next+0x228>)
    1292:	4798      	blx	r3
	return;
    1294:	e059      	b.n	134a <_usb_d_dev_out_next+0x17e>
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1296:	8a06      	ldrh	r6, [r0, #16]
    1298:	4b52      	ldr	r3, [pc, #328]	; (13e4 <_usb_d_dev_out_next+0x218>)
    129a:	429e      	cmp	r6, r3
    129c:	d100      	bne.n	12a0 <_usb_d_dev_out_next+0xd4>
    129e:	e08e      	b.n	13be <_usb_d_dev_out_next+0x1f2>
    12a0:	2300      	movs	r3, #0
    12a2:	469b      	mov	fp, r3
    12a4:	469a      	mov	sl, r3
    12a6:	e7ae      	b.n	1206 <_usb_d_dev_out_next+0x3a>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    12a8:	7ce3      	ldrb	r3, [r4, #19]
    12aa:	06db      	lsls	r3, r3, #27
    12ac:	d400      	bmi.n	12b0 <_usb_d_dev_out_next+0xe4>
    12ae:	e07f      	b.n	13b0 <_usb_d_dev_out_next+0x1e4>
		ept->flags.bits.need_zlp  = 0;
    12b0:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    12b2:	2210      	movs	r2, #16
    12b4:	4393      	bics	r3, r2
    12b6:	2220      	movs	r2, #32
    12b8:	4313      	orrs	r3, r2
    12ba:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
    12bc:	4a48      	ldr	r2, [pc, #288]	; (13e0 <_usb_d_dev_out_next+0x214>)
    12be:	016b      	lsls	r3, r5, #5
    12c0:	68e1      	ldr	r1, [r4, #12]
    12c2:	5099      	str	r1, [r3, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    12c4:	8a21      	ldrh	r1, [r4, #16]
    12c6:	18d3      	adds	r3, r2, r3
    12c8:	685a      	ldr	r2, [r3, #4]
    12ca:	0489      	lsls	r1, r1, #18
    12cc:	0909      	lsrs	r1, r1, #4
    12ce:	484a      	ldr	r0, [pc, #296]	; (13f8 <_usb_d_dev_out_next+0x22c>)
    12d0:	4002      	ands	r2, r0
    12d2:	430a      	orrs	r2, r1
    12d4:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    12d6:	685a      	ldr	r2, [r3, #4]
    12d8:	0b92      	lsrs	r2, r2, #14
    12da:	0392      	lsls	r2, r2, #14
    12dc:	605a      	str	r2, [r3, #4]
    12de:	e022      	b.n	1326 <_usb_d_dev_out_next+0x15a>
		ept->trans_count += trans_size;
    12e0:	68a2      	ldr	r2, [r4, #8]
    12e2:	4452      	add	r2, sl
    12e4:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    12e6:	4293      	cmp	r3, r2
    12e8:	d9c1      	bls.n	126e <_usb_d_dev_out_next+0xa2>
			trans_next = ept->trans_size - ept->trans_count;
    12ea:	1a9b      	subs	r3, r3, r2
    12ec:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    12ee:	7ce1      	ldrb	r1, [r4, #19]
    12f0:	0689      	lsls	r1, r1, #26
    12f2:	d530      	bpl.n	1356 <_usb_d_dev_out_next+0x18a>
    12f4:	8a22      	ldrh	r2, [r4, #16]
    12f6:	1c11      	adds	r1, r2, #0
    12f8:	b292      	uxth	r2, r2
    12fa:	429a      	cmp	r2, r3
    12fc:	d900      	bls.n	1300 <_usb_d_dev_out_next+0x134>
    12fe:	1c19      	adds	r1, r3, #0
    1300:	b28b      	uxth	r3, r1
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    1302:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    1304:	016a      	lsls	r2, r5, #5
    1306:	4936      	ldr	r1, [pc, #216]	; (13e0 <_usb_d_dev_out_next+0x214>)
    1308:	5050      	str	r0, [r2, r1]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    130a:	016a      	lsls	r2, r5, #5
    130c:	4934      	ldr	r1, [pc, #208]	; (13e0 <_usb_d_dev_out_next+0x214>)
    130e:	1889      	adds	r1, r1, r2
    1310:	684a      	ldr	r2, [r1, #4]
    1312:	049b      	lsls	r3, r3, #18
    1314:	091b      	lsrs	r3, r3, #4
    1316:	4838      	ldr	r0, [pc, #224]	; (13f8 <_usb_d_dev_out_next+0x22c>)
    1318:	4002      	ands	r2, r0
    131a:	4313      	orrs	r3, r2
    131c:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    131e:	684b      	ldr	r3, [r1, #4]
    1320:	0b9b      	lsrs	r3, r3, #14
    1322:	039b      	lsls	r3, r3, #14
    1324:	604b      	str	r3, [r1, #4]
	if (!isr) {
    1326:	4643      	mov	r3, r8
    1328:	2b00      	cmp	r3, #0
    132a:	d108      	bne.n	133e <_usb_d_dev_out_next+0x172>
			inten = USB_D_BANK0_INT_FLAGS;
    132c:	2225      	movs	r2, #37	; 0x25
		if (is_ctrl) {
    132e:	464b      	mov	r3, r9
    1330:	2b01      	cmp	r3, #1
    1332:	d02f      	beq.n	1394 <_usb_d_dev_out_next+0x1c8>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1334:	016b      	lsls	r3, r5, #5
    1336:	4931      	ldr	r1, [pc, #196]	; (13fc <_usb_d_dev_out_next+0x230>)
    1338:	468c      	mov	ip, r1
    133a:	4463      	add	r3, ip
    133c:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    133e:	016d      	lsls	r5, r5, #5
    1340:	4b29      	ldr	r3, [pc, #164]	; (13e8 <_usb_d_dev_out_next+0x21c>)
    1342:	469c      	mov	ip, r3
    1344:	4465      	add	r5, ip
    1346:	2340      	movs	r3, #64	; 0x40
    1348:	712b      	strb	r3, [r5, #4]
}
    134a:	bc3c      	pop	{r2, r3, r4, r5}
    134c:	4690      	mov	r8, r2
    134e:	4699      	mov	r9, r3
    1350:	46a2      	mov	sl, r4
    1352:	46ab      	mov	fp, r5
    1354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (trans_next > ept->size) {
    1356:	8a21      	ldrh	r1, [r4, #16]
    1358:	428b      	cmp	r3, r1
    135a:	d90a      	bls.n	1372 <_usb_d_dev_out_next+0x1a6>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    135c:	2180      	movs	r1, #128	; 0x80
    135e:	0189      	lsls	r1, r1, #6
    1360:	428b      	cmp	r3, r1
    1362:	d80d      	bhi.n	1380 <_usb_d_dev_out_next+0x1b4>
    1364:	43b3      	bics	r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    1366:	6821      	ldr	r1, [r4, #0]
    1368:	188a      	adds	r2, r1, r2
	bank->ADDR.reg          = addr;
    136a:	0169      	lsls	r1, r5, #5
    136c:	481c      	ldr	r0, [pc, #112]	; (13e0 <_usb_d_dev_out_next+0x214>)
    136e:	500a      	str	r2, [r1, r0]
    1370:	e7cb      	b.n	130a <_usb_d_dev_out_next+0x13e>
				} else if (trans_next < ept->size) {
    1372:	428b      	cmp	r3, r1
    1374:	d2f7      	bcs.n	1366 <_usb_d_dev_out_next+0x19a>
					ept->flags.bits.use_cache = 1;
    1376:	7ce1      	ldrb	r1, [r4, #19]
    1378:	2020      	movs	r0, #32
    137a:	4301      	orrs	r1, r0
    137c:	74e1      	strb	r1, [r4, #19]
    137e:	e7f2      	b.n	1366 <_usb_d_dev_out_next+0x19a>
						trans_next = USB_D_DEV_TRANS_MAX;
    1380:	2380      	movs	r3, #128	; 0x80
    1382:	019b      	lsls	r3, r3, #6
    1384:	e7ef      	b.n	1366 <_usb_d_dev_out_next+0x19a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1386:	016b      	lsls	r3, r5, #5
    1388:	4a19      	ldr	r2, [pc, #100]	; (13f0 <_usb_d_dev_out_next+0x224>)
    138a:	4694      	mov	ip, r2
    138c:	4463      	add	r3, ip
    138e:	222d      	movs	r2, #45	; 0x2d
    1390:	701a      	strb	r2, [r3, #0]
    1392:	e776      	b.n	1282 <_usb_d_dev_out_next+0xb6>
	bank->STATUS_BK.reg     = 0;
    1394:	016a      	lsls	r2, r5, #5
    1396:	4b12      	ldr	r3, [pc, #72]	; (13e0 <_usb_d_dev_out_next+0x214>)
    1398:	189b      	adds	r3, r3, r2
    139a:	2200      	movs	r2, #0
    139c:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    139e:	322d      	adds	r2, #45	; 0x2d
    13a0:	e7c8      	b.n	1334 <_usb_d_dev_out_next+0x168>
	uint16_t           last_pkt   = last_trans & size_mask;
    13a2:	05bf      	lsls	r7, r7, #22
    13a4:	0dbf      	lsrs	r7, r7, #22
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    13a6:	7cc3      	ldrb	r3, [r0, #19]
    13a8:	2207      	movs	r2, #7
    13aa:	401a      	ands	r2, r3
    13ac:	4691      	mov	r9, r2
    13ae:	e735      	b.n	121c <_usb_d_dev_out_next+0x50>
	} else if (isr && last_pkt < ept->size) {
    13b0:	4643      	mov	r3, r8
    13b2:	2b00      	cmp	r3, #0
    13b4:	d10c      	bne.n	13d0 <_usb_d_dev_out_next+0x204>
		ept->trans_count += trans_size;
    13b6:	68a3      	ldr	r3, [r4, #8]
    13b8:	4453      	add	r3, sl
    13ba:	60a3      	str	r3, [r4, #8]
    13bc:	e757      	b.n	126e <_usb_d_dev_out_next+0xa2>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    13be:	7cc3      	ldrb	r3, [r0, #19]
    13c0:	2207      	movs	r2, #7
    13c2:	401a      	ands	r2, r3
    13c4:	4691      	mov	r9, r2
	uint16_t           last_pkt   = last_trans & size_mask;
    13c6:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    13c8:	2300      	movs	r3, #0
    13ca:	469b      	mov	fp, r3
    13cc:	469a      	mov	sl, r3
    13ce:	e72b      	b.n	1228 <_usb_d_dev_out_next+0x5c>
	} else if (isr && last_pkt < ept->size) {
    13d0:	8a23      	ldrh	r3, [r4, #16]
    13d2:	42bb      	cmp	r3, r7
    13d4:	d900      	bls.n	13d8 <_usb_d_dev_out_next+0x20c>
    13d6:	e743      	b.n	1260 <_usb_d_dev_out_next+0x94>
		ept->trans_count += trans_size;
    13d8:	68a3      	ldr	r3, [r4, #8]
    13da:	4453      	add	r3, sl
    13dc:	60a3      	str	r3, [r4, #8]
    13de:	e746      	b.n	126e <_usb_d_dev_out_next+0xa2>
    13e0:	200000a0 	.word	0x200000a0
    13e4:	000003ff 	.word	0x000003ff
    13e8:	41005100 	.word	0x41005100
    13ec:	00001b85 	.word	0x00001b85
    13f0:	41005108 	.word	0x41005108
    13f4:	00000e4d 	.word	0x00000e4d
    13f8:	f0003fff 	.word	0xf0003fff
    13fc:	41005109 	.word	0x41005109

00001400 <_usb_d_dev_init>:
{
    1400:	b510      	push	{r4, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    1402:	4b31      	ldr	r3, [pc, #196]	; (14c8 <_usb_d_dev_init+0xc8>)
    1404:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    1406:	07db      	lsls	r3, r3, #31
    1408:	d41f      	bmi.n	144a <_usb_d_dev_init+0x4a>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    140a:	492f      	ldr	r1, [pc, #188]	; (14c8 <_usb_d_dev_init+0xc8>)
    140c:	2203      	movs	r2, #3
    140e:	788b      	ldrb	r3, [r1, #2]
    1410:	4213      	tst	r3, r2
    1412:	d1fc      	bne.n	140e <_usb_d_dev_init+0xe>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    1414:	4b2c      	ldr	r3, [pc, #176]	; (14c8 <_usb_d_dev_init+0xc8>)
    1416:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    1418:	079b      	lsls	r3, r3, #30
    141a:	d50e      	bpl.n	143a <_usb_d_dev_init+0x3a>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    141c:	4a2a      	ldr	r2, [pc, #168]	; (14c8 <_usb_d_dev_init+0xc8>)
    141e:	7813      	ldrb	r3, [r2, #0]
    1420:	2102      	movs	r1, #2
    1422:	438b      	bics	r3, r1
    1424:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1426:	0011      	movs	r1, r2
    1428:	2203      	movs	r2, #3
    142a:	788b      	ldrb	r3, [r1, #2]
    142c:	4213      	tst	r3, r2
    142e:	d1fc      	bne.n	142a <_usb_d_dev_init+0x2a>
    1430:	4925      	ldr	r1, [pc, #148]	; (14c8 <_usb_d_dev_init+0xc8>)
    1432:	2202      	movs	r2, #2
    1434:	788b      	ldrb	r3, [r1, #2]
    1436:	4213      	tst	r3, r2
    1438:	d1fc      	bne.n	1434 <_usb_d_dev_init+0x34>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    143a:	2201      	movs	r2, #1
    143c:	4b22      	ldr	r3, [pc, #136]	; (14c8 <_usb_d_dev_init+0xc8>)
    143e:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1440:	0019      	movs	r1, r3
    1442:	3202      	adds	r2, #2
    1444:	788b      	ldrb	r3, [r1, #2]
    1446:	4213      	tst	r3, r2
    1448:	d1fc      	bne.n	1444 <_usb_d_dev_init+0x44>
    144a:	491f      	ldr	r1, [pc, #124]	; (14c8 <_usb_d_dev_init+0xc8>)
    144c:	2201      	movs	r2, #1
    144e:	788b      	ldrb	r3, [r1, #2]
    1450:	4213      	tst	r3, r2
    1452:	d1fc      	bne.n	144e <_usb_d_dev_init+0x4e>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    1454:	4b1d      	ldr	r3, [pc, #116]	; (14cc <_usb_d_dev_init+0xcc>)
    1456:	4a1e      	ldr	r2, [pc, #120]	; (14d0 <_usb_d_dev_init+0xd0>)
    1458:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    145a:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    145c:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    145e:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    1460:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    1462:	4b1c      	ldr	r3, [pc, #112]	; (14d4 <_usb_d_dev_init+0xd4>)
    1464:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    1466:	4b1c      	ldr	r3, [pc, #112]	; (14d8 <_usb_d_dev_init+0xd8>)
    1468:	681b      	ldr	r3, [r3, #0]
    146a:	0b5a      	lsrs	r2, r3, #13
	uint32_t pad_transn
    146c:	211f      	movs	r1, #31
    146e:	400a      	ands	r2, r1
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    1470:	0c98      	lsrs	r0, r3, #18
	uint32_t pad_transp
    1472:	4001      	ands	r1, r0
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    1474:	019b      	lsls	r3, r3, #6
    1476:	0f5b      	lsrs	r3, r3, #29
	if (pad_transn == 0x1F) {
    1478:	2a1f      	cmp	r2, #31
    147a:	d01f      	beq.n	14bc <_usb_d_dev_init+0xbc>
	if (pad_transp == 0x1F) {
    147c:	291f      	cmp	r1, #31
    147e:	d01f      	beq.n	14c0 <_usb_d_dev_init+0xc0>
	if (pad_trim == 0x7) {
    1480:	2b07      	cmp	r3, #7
    1482:	d01f      	beq.n	14c4 <_usb_d_dev_init+0xc4>
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    1484:	0192      	lsls	r2, r2, #6
    1486:	430a      	orrs	r2, r1
    1488:	031b      	lsls	r3, r3, #12
    148a:	4313      	orrs	r3, r2
    148c:	4a0e      	ldr	r2, [pc, #56]	; (14c8 <_usb_d_dev_init+0xc8>)
    148e:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    1490:	78d3      	ldrb	r3, [r2, #3]
    1492:	2103      	movs	r1, #3
    1494:	430b      	orrs	r3, r1
    1496:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    1498:	78d3      	ldrb	r3, [r2, #3]
    149a:	210c      	movs	r1, #12
    149c:	430b      	orrs	r3, r1
    149e:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    14a0:	2304      	movs	r3, #4
    14a2:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    14a4:	0011      	movs	r1, r2
    14a6:	2203      	movs	r2, #3
    14a8:	788b      	ldrb	r3, [r1, #2]
    14aa:	4213      	tst	r3, r2
    14ac:	d1fc      	bne.n	14a8 <_usb_d_dev_init+0xa8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    14ae:	4b06      	ldr	r3, [pc, #24]	; (14c8 <_usb_d_dev_init+0xc8>)
    14b0:	4a06      	ldr	r2, [pc, #24]	; (14cc <_usb_d_dev_init+0xcc>)
    14b2:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    14b4:	2201      	movs	r2, #1
    14b6:	811a      	strh	r2, [r3, #8]
}
    14b8:	2000      	movs	r0, #0
    14ba:	bd10      	pop	{r4, pc}
		pad_transn = 5;
    14bc:	3a1a      	subs	r2, #26
    14be:	e7dd      	b.n	147c <_usb_d_dev_init+0x7c>
		pad_transp = 29;
    14c0:	3902      	subs	r1, #2
    14c2:	e7dd      	b.n	1480 <_usb_d_dev_init+0x80>
		pad_trim = 5;
    14c4:	3b02      	subs	r3, #2
    14c6:	e7dd      	b.n	1484 <_usb_d_dev_init+0x84>
    14c8:	41005000 	.word	0x41005000
    14cc:	200000a0 	.word	0x200000a0
    14d0:	00000d8d 	.word	0x00000d8d
    14d4:	00000fe1 	.word	0x00000fe1
    14d8:	00806024 	.word	0x00806024

000014dc <_usb_d_dev_ep_stall>:
{
    14dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    14de:	230f      	movs	r3, #15
    14e0:	4003      	ands	r3, r0
    14e2:	b240      	sxtb	r0, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    14e4:	0fc4      	lsrs	r4, r0, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    14e6:	2b00      	cmp	r3, #0
    14e8:	d009      	beq.n	14fe <_usb_d_dev_ep_stall+0x22>
    14ea:	001a      	movs	r2, r3
    14ec:	2800      	cmp	r0, #0
    14ee:	db04      	blt.n	14fa <_usb_d_dev_ep_stall+0x1e>
	if (epn > CONF_USB_D_MAX_EP_N) {
    14f0:	2b02      	cmp	r3, #2
    14f2:	d905      	bls.n	1500 <_usb_d_dev_ep_stall+0x24>
		return -USB_ERR_PARAM;
    14f4:	2012      	movs	r0, #18
    14f6:	4240      	negs	r0, r0
    14f8:	e019      	b.n	152e <_usb_d_dev_ep_stall+0x52>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    14fa:	1c9a      	adds	r2, r3, #2
    14fc:	e7f8      	b.n	14f0 <_usb_d_dev_ep_stall+0x14>
	return &dev_inst.ep[ep_index];
    14fe:	2200      	movs	r2, #0
	if (USB_EP_STALL_SET == ctrl) {
    1500:	2901      	cmp	r1, #1
    1502:	d015      	beq.n	1530 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    1504:	2900      	cmp	r1, #0
    1506:	d036      	beq.n	1576 <_usb_d_dev_ep_stall+0x9a>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1508:	0093      	lsls	r3, r2, #2
    150a:	189b      	adds	r3, r3, r2
    150c:	009b      	lsls	r3, r3, #2
    150e:	4a47      	ldr	r2, [pc, #284]	; (162c <_usb_d_dev_ep_stall+0x150>)
    1510:	18d2      	adds	r2, r2, r3
    1512:	3286      	adds	r2, #134	; 0x86
    1514:	7812      	ldrb	r2, [r2, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    1516:	230f      	movs	r3, #15
    1518:	4013      	ands	r3, r2
    151a:	015b      	lsls	r3, r3, #5
    151c:	4a44      	ldr	r2, [pc, #272]	; (1630 <_usb_d_dev_ep_stall+0x154>)
    151e:	4694      	mov	ip, r2
    1520:	4463      	add	r3, ip
    1522:	7998      	ldrb	r0, [r3, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1524:	2310      	movs	r3, #16
    1526:	40a3      	lsls	r3, r4
    1528:	4018      	ands	r0, r3
	return _usbd_ep_is_stalled(epn, dir);
    152a:	1e43      	subs	r3, r0, #1
    152c:	4198      	sbcs	r0, r3
}
    152e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1530:	2510      	movs	r5, #16
    1532:	40a5      	lsls	r5, r4
    1534:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1536:	493d      	ldr	r1, [pc, #244]	; (162c <_usb_d_dev_ep_stall+0x150>)
    1538:	0090      	lsls	r0, r2, #2
    153a:	1883      	adds	r3, r0, r2
    153c:	009b      	lsls	r3, r3, #2
    153e:	18cb      	adds	r3, r1, r3
    1540:	3386      	adds	r3, #134	; 0x86
    1542:	781e      	ldrb	r6, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1544:	230f      	movs	r3, #15
    1546:	4033      	ands	r3, r6
    1548:	015e      	lsls	r6, r3, #5
    154a:	4f39      	ldr	r7, [pc, #228]	; (1630 <_usb_d_dev_ep_stall+0x154>)
    154c:	46bc      	mov	ip, r7
    154e:	4466      	add	r6, ip
    1550:	7175      	strb	r5, [r6, #5]
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    1552:	2520      	movs	r5, #32
    1554:	40a5      	lsls	r5, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    1556:	b2ec      	uxtb	r4, r5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1558:	015b      	lsls	r3, r3, #5
    155a:	4d36      	ldr	r5, [pc, #216]	; (1634 <_usb_d_dev_ep_stall+0x158>)
    155c:	46ac      	mov	ip, r5
    155e:	4463      	add	r3, ip
    1560:	701c      	strb	r4, [r3, #0]
	ept->flags.bits.is_stalled = 1;
    1562:	1882      	adds	r2, r0, r2
    1564:	0092      	lsls	r2, r2, #2
    1566:	188a      	adds	r2, r1, r2
    1568:	3280      	adds	r2, #128	; 0x80
    156a:	79d3      	ldrb	r3, [r2, #7]
    156c:	2108      	movs	r1, #8
    156e:	430b      	orrs	r3, r1
    1570:	71d3      	strb	r3, [r2, #7]
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    1572:	2000      	movs	r0, #0
    1574:	e7db      	b.n	152e <_usb_d_dev_ep_stall+0x52>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    1576:	0093      	lsls	r3, r2, #2
    1578:	189b      	adds	r3, r3, r2
    157a:	0099      	lsls	r1, r3, #2
    157c:	4b2b      	ldr	r3, [pc, #172]	; (162c <_usb_d_dev_ep_stall+0x150>)
    157e:	185b      	adds	r3, r3, r1
    1580:	3386      	adds	r3, #134	; 0x86
    1582:	781b      	ldrb	r3, [r3, #0]
    1584:	210f      	movs	r1, #15
    1586:	400b      	ands	r3, r1
    1588:	015d      	lsls	r5, r3, #5
    158a:	492b      	ldr	r1, [pc, #172]	; (1638 <_usb_d_dev_ep_stall+0x15c>)
    158c:	468c      	mov	ip, r1
    158e:	4465      	add	r5, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    1590:	2183      	movs	r1, #131	; 0x83
    1592:	0049      	lsls	r1, r1, #1
    1594:	5c6e      	ldrb	r6, [r5, r1]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1596:	39f6      	subs	r1, #246	; 0xf6
    1598:	40a1      	lsls	r1, r4
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    159a:	2000      	movs	r0, #0
	if (!is_stalled) {
    159c:	420e      	tst	r6, r1
    159e:	d0c6      	beq.n	152e <_usb_d_dev_ep_stall+0x52>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    15a0:	b2c9      	uxtb	r1, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    15a2:	3005      	adds	r0, #5
    15a4:	30ff      	adds	r0, #255	; 0xff
    15a6:	5429      	strb	r1, [r5, r0]
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    15a8:	2120      	movs	r1, #32
    15aa:	40a1      	lsls	r1, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    15ac:	b2c8      	uxtb	r0, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    15ae:	015b      	lsls	r3, r3, #5
    15b0:	4e22      	ldr	r6, [pc, #136]	; (163c <_usb_d_dev_ep_stall+0x160>)
    15b2:	46b4      	mov	ip, r6
    15b4:	4463      	add	r3, ip
    15b6:	7018      	strb	r0, [r3, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    15b8:	2308      	movs	r3, #8
    15ba:	33ff      	adds	r3, #255	; 0xff
    15bc:	5ceb      	ldrb	r3, [r5, r3]
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    15be:	420b      	tst	r3, r1
    15c0:	d009      	beq.n	15d6 <_usb_d_dev_ep_stall+0xfa>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    15c2:	2308      	movs	r3, #8
    15c4:	33ff      	adds	r3, #255	; 0xff
    15c6:	54e8      	strb	r0, [r5, r3]
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    15c8:	3b07      	subs	r3, #7
    15ca:	3bff      	subs	r3, #255	; 0xff
    15cc:	40a3      	lsls	r3, r4
    15ce:	b2db      	uxtb	r3, r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    15d0:	2182      	movs	r1, #130	; 0x82
    15d2:	0049      	lsls	r1, r1, #1
    15d4:	546b      	strb	r3, [r5, r1]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    15d6:	0093      	lsls	r3, r2, #2
    15d8:	189b      	adds	r3, r3, r2
    15da:	0099      	lsls	r1, r3, #2
    15dc:	4b13      	ldr	r3, [pc, #76]	; (162c <_usb_d_dev_ep_stall+0x150>)
    15de:	185b      	adds	r3, r3, r1
    15e0:	3380      	adds	r3, #128	; 0x80
    15e2:	79d9      	ldrb	r1, [r3, #7]
    15e4:	2307      	movs	r3, #7
    15e6:	400b      	ands	r3, r1
    15e8:	2b01      	cmp	r3, #1
    15ea:	d00b      	beq.n	1604 <_usb_d_dev_ep_stall+0x128>
		ept->flags.bits.is_stalled = 0;
    15ec:	0093      	lsls	r3, r2, #2
    15ee:	189a      	adds	r2, r3, r2
    15f0:	0092      	lsls	r2, r2, #2
    15f2:	4b0e      	ldr	r3, [pc, #56]	; (162c <_usb_d_dev_ep_stall+0x150>)
    15f4:	189b      	adds	r3, r3, r2
    15f6:	3380      	adds	r3, #128	; 0x80
    15f8:	79da      	ldrb	r2, [r3, #7]
    15fa:	2108      	movs	r1, #8
    15fc:	438a      	bics	r2, r1
    15fe:	71da      	strb	r2, [r3, #7]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    1600:	2000      	movs	r0, #0
    1602:	e794      	b.n	152e <_usb_d_dev_ep_stall+0x52>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    1604:	3306      	adds	r3, #6
    1606:	33ff      	adds	r3, #255	; 0xff
    1608:	5ce9      	ldrb	r1, [r5, r3]
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    160a:	3bd6      	subs	r3, #214	; 0xd6
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    160c:	2000      	movs	r0, #0
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    160e:	4219      	tst	r1, r3
    1610:	d000      	beq.n	1614 <_usb_d_dev_ep_stall+0x138>
    1612:	e78c      	b.n	152e <_usb_d_dev_ep_stall+0x52>
			ept->flags.bits.is_stalled = 0;
    1614:	0093      	lsls	r3, r2, #2
    1616:	189a      	adds	r2, r3, r2
    1618:	0092      	lsls	r2, r2, #2
    161a:	4b04      	ldr	r3, [pc, #16]	; (162c <_usb_d_dev_ep_stall+0x150>)
    161c:	189b      	adds	r3, r3, r2
    161e:	3380      	adds	r3, #128	; 0x80
    1620:	79da      	ldrb	r2, [r3, #7]
    1622:	2108      	movs	r1, #8
    1624:	438a      	bics	r2, r1
    1626:	71da      	strb	r2, [r3, #7]
    1628:	e781      	b.n	152e <_usb_d_dev_ep_stall+0x52>
    162a:	46c0      	nop			; (mov r8, r8)
    162c:	200000a0 	.word	0x200000a0
    1630:	41005100 	.word	0x41005100
    1634:	41005109 	.word	0x41005109
    1638:	41005000 	.word	0x41005000
    163c:	41005108 	.word	0x41005108

00001640 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    1640:	b570      	push	{r4, r5, r6, lr}
    1642:	000d      	movs	r5, r1
	uint8_t            epn   = USB_EP_GET_N(ep);
    1644:	230f      	movs	r3, #15
    1646:	4018      	ands	r0, r3
    1648:	0144      	lsls	r4, r0, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    164a:	4b16      	ldr	r3, [pc, #88]	; (16a4 <_usb_d_dev_ep_read_req+0x64>)
    164c:	191b      	adds	r3, r3, r4
	uint32_t           addr  = bank[0].ADDR.reg;
    164e:	6819      	ldr	r1, [r3, #0]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    1650:	685b      	ldr	r3, [r3, #4]
    1652:	049b      	lsls	r3, r3, #18
    1654:	0c9e      	lsrs	r6, r3, #18

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    1656:	2802      	cmp	r0, #2
    1658:	d81a      	bhi.n	1690 <_usb_d_dev_ep_read_req+0x50>
    165a:	2d00      	cmp	r5, #0
    165c:	d01b      	beq.n	1696 <_usb_d_dev_ep_read_req+0x56>
    165e:	4b12      	ldr	r3, [pc, #72]	; (16a8 <_usb_d_dev_ep_read_req+0x68>)
    1660:	469c      	mov	ip, r3
    1662:	4464      	add	r4, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1664:	2380      	movs	r3, #128	; 0x80
    1666:	005b      	lsls	r3, r3, #1
    1668:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    166a:	2b11      	cmp	r3, #17
    166c:	d116      	bne.n	169c <_usb_d_dev_ep_read_req+0x5c>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    166e:	2308      	movs	r3, #8
    1670:	33ff      	adds	r3, #255	; 0xff
    1672:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
		return ERR_NONE;
    1674:	2000      	movs	r0, #0
	if (!_usbd_ep_is_setup(epn)) {
    1676:	06db      	lsls	r3, r3, #27
    1678:	d400      	bmi.n	167c <_usb_d_dev_ep_read_req+0x3c>
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    167a:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(req_buf, (void *)addr, 8);
    167c:	2208      	movs	r2, #8
    167e:	0028      	movs	r0, r5
    1680:	4b0a      	ldr	r3, [pc, #40]	; (16ac <_usb_d_dev_ep_read_req+0x6c>)
    1682:	4798      	blx	r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1684:	2210      	movs	r2, #16
    1686:	2308      	movs	r3, #8
    1688:	33ff      	adds	r3, #255	; 0xff
    168a:	54e2      	strb	r2, [r4, r3]
	return bytes;
    168c:	0030      	movs	r0, r6
    168e:	e7f4      	b.n	167a <_usb_d_dev_ep_read_req+0x3a>
		return -USB_ERR_PARAM;
    1690:	2012      	movs	r0, #18
    1692:	4240      	negs	r0, r0
    1694:	e7f1      	b.n	167a <_usb_d_dev_ep_read_req+0x3a>
    1696:	2012      	movs	r0, #18
    1698:	4240      	negs	r0, r0
    169a:	e7ee      	b.n	167a <_usb_d_dev_ep_read_req+0x3a>
		return -USB_ERR_FUNC;
    169c:	2013      	movs	r0, #19
    169e:	4240      	negs	r0, r0
    16a0:	e7eb      	b.n	167a <_usb_d_dev_ep_read_req+0x3a>
    16a2:	46c0      	nop			; (mov r8, r8)
    16a4:	200000a0 	.word	0x200000a0
    16a8:	41005000 	.word	0x41005000
    16ac:	00001b85 	.word	0x00001b85

000016b0 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    16b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    16b2:	46de      	mov	lr, fp
    16b4:	4657      	mov	r7, sl
    16b6:	464e      	mov	r6, r9
    16b8:	4645      	mov	r5, r8
    16ba:	b5e0      	push	{r5, r6, r7, lr}
    16bc:	b085      	sub	sp, #20
    16be:	4680      	mov	r8, r0
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    16c0:	7a06      	ldrb	r6, [r0, #8]
    16c2:	230f      	movs	r3, #15
    16c4:	4033      	ands	r3, r6
    16c6:	b276      	sxtb	r6, r6
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    16c8:	2b00      	cmp	r3, #0
    16ca:	d100      	bne.n	16ce <_usb_d_dev_ep_trans+0x1e>
    16cc:	e0d3      	b.n	1876 <_usb_d_dev_ep_trans+0x1c6>
    16ce:	0018      	movs	r0, r3
    16d0:	2e00      	cmp	r6, #0
    16d2:	db39      	blt.n	1748 <_usb_d_dev_ep_trans+0x98>
	return &dev_inst.ep[ep_index];
    16d4:	0004      	movs	r4, r0
    16d6:	4a73      	ldr	r2, [pc, #460]	; (18a4 <_usb_d_dev_ep_trans+0x1f4>)
    16d8:	3260      	adds	r2, #96	; 0x60
    16da:	1c41      	adds	r1, r0, #1
    16dc:	008d      	lsls	r5, r1, #2
    16de:	186d      	adds	r5, r5, r1
    16e0:	00ad      	lsls	r5, r5, #2
    16e2:	1955      	adds	r5, r2, r5
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    16e4:	0081      	lsls	r1, r0, #2
    16e6:	1809      	adds	r1, r1, r0
    16e8:	0089      	lsls	r1, r1, #2
    16ea:	1852      	adds	r2, r2, r1
    16ec:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    16ee:	4a6e      	ldr	r2, [pc, #440]	; (18a8 <_usb_d_dev_ep_trans+0x1f8>)
    16f0:	4291      	cmp	r1, r2
    16f2:	d02b      	beq.n	174c <_usb_d_dev_ep_trans+0x9c>
    16f4:	1e4f      	subs	r7, r1, #1
    16f6:	b2bf      	uxth	r7, r7
	bool     size_n_aligned = (trans->size & size_mask);
    16f8:	4642      	mov	r2, r8
    16fa:	6852      	ldr	r2, [r2, #4]
    16fc:	4017      	ands	r7, r2

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    16fe:	2b02      	cmp	r3, #2
    1700:	d900      	bls.n	1704 <_usb_d_dev_ep_trans+0x54>
    1702:	e0a4      	b.n	184e <_usb_d_dev_ep_trans+0x19e>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    1704:	4643      	mov	r3, r8
    1706:	681b      	ldr	r3, [r3, #0]
    1708:	4868      	ldr	r0, [pc, #416]	; (18ac <_usb_d_dev_ep_trans+0x1fc>)
    170a:	4283      	cmp	r3, r0
    170c:	d920      	bls.n	1750 <_usb_d_dev_ep_trans+0xa0>
    170e:	1898      	adds	r0, r3, r2
    1710:	9001      	str	r0, [sp, #4]
    1712:	4867      	ldr	r0, [pc, #412]	; (18b0 <_usb_d_dev_ep_trans+0x200>)
    1714:	4684      	mov	ip, r0
    1716:	9801      	ldr	r0, [sp, #4]
    1718:	4560      	cmp	r0, ip
    171a:	d819      	bhi.n	1750 <_usb_d_dev_ep_trans+0xa0>
    171c:	079b      	lsls	r3, r3, #30
    171e:	d117      	bne.n	1750 <_usb_d_dev_ep_trans+0xa0>
	    || (!dir && (trans->size < ept->size))) {
    1720:	2e00      	cmp	r6, #0
    1722:	db32      	blt.n	178a <_usb_d_dev_ep_trans+0xda>
    1724:	4291      	cmp	r1, r2
    1726:	d900      	bls.n	172a <_usb_d_dev_ep_trans+0x7a>
    1728:	e0af      	b.n	188a <_usb_d_dev_ep_trans+0x1da>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    172a:	2f00      	cmp	r7, #0
    172c:	d030      	beq.n	1790 <_usb_d_dev_ep_trans+0xe0>
		if (!ept->cache) {
    172e:	00a3      	lsls	r3, r4, #2
    1730:	191b      	adds	r3, r3, r4
    1732:	009a      	lsls	r2, r3, #2
    1734:	4b5b      	ldr	r3, [pc, #364]	; (18a4 <_usb_d_dev_ep_trans+0x1f4>)
    1736:	189b      	adds	r3, r3, r2
    1738:	3380      	adds	r3, #128	; 0x80
    173a:	681b      	ldr	r3, [r3, #0]
    173c:	2b00      	cmp	r3, #0
    173e:	d100      	bne.n	1742 <_usb_d_dev_ep_trans+0x92>
    1740:	e08b      	b.n	185a <_usb_d_dev_ep_trans+0x1aa>
	bool use_cache = false;
    1742:	2300      	movs	r3, #0
    1744:	4699      	mov	r9, r3
    1746:	e00f      	b.n	1768 <_usb_d_dev_ep_trans+0xb8>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1748:	1c98      	adds	r0, r3, #2
    174a:	e7c3      	b.n	16d4 <_usb_d_dev_ep_trans+0x24>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    174c:	000f      	movs	r7, r1
    174e:	e7d3      	b.n	16f8 <_usb_d_dev_ep_trans+0x48>
		if (!ept->cache) {
    1750:	00a3      	lsls	r3, r4, #2
    1752:	191b      	adds	r3, r3, r4
    1754:	009a      	lsls	r2, r3, #2
    1756:	4b53      	ldr	r3, [pc, #332]	; (18a4 <_usb_d_dev_ep_trans+0x1f4>)
    1758:	189b      	adds	r3, r3, r2
    175a:	3380      	adds	r3, #128	; 0x80
    175c:	681b      	ldr	r3, [r3, #0]
    175e:	2b00      	cmp	r3, #0
    1760:	d100      	bne.n	1764 <_usb_d_dev_ep_trans+0xb4>
    1762:	e077      	b.n	1854 <_usb_d_dev_ep_trans+0x1a4>
		use_cache = true;
    1764:	2301      	movs	r3, #1
    1766:	4699      	mov	r9, r3
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    1768:	00a3      	lsls	r3, r4, #2
    176a:	191b      	adds	r3, r3, r4
    176c:	009a      	lsls	r2, r3, #2
    176e:	4b4d      	ldr	r3, [pc, #308]	; (18a4 <_usb_d_dev_ep_trans+0x1f4>)
    1770:	189b      	adds	r3, r3, r2
    1772:	3380      	adds	r3, #128	; 0x80
    1774:	79db      	ldrb	r3, [r3, #7]
		return USB_HALTED;
    1776:	2002      	movs	r0, #2
	if (ept->flags.bits.is_stalled) {
    1778:	071b      	lsls	r3, r3, #28
    177a:	d50c      	bpl.n	1796 <_usb_d_dev_ep_trans+0xe6>
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    177c:	b005      	add	sp, #20
    177e:	bc3c      	pop	{r2, r3, r4, r5}
    1780:	4690      	mov	r8, r2
    1782:	4699      	mov	r9, r3
    1784:	46a2      	mov	sl, r4
    1786:	46ab      	mov	fp, r5
    1788:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bool use_cache = false;
    178a:	2300      	movs	r3, #0
    178c:	4699      	mov	r9, r3
    178e:	e7eb      	b.n	1768 <_usb_d_dev_ep_trans+0xb8>
    1790:	2300      	movs	r3, #0
    1792:	4699      	mov	r9, r3
    1794:	e7e8      	b.n	1768 <_usb_d_dev_ep_trans+0xb8>
	atomic_enter_critical(&flags);
    1796:	a803      	add	r0, sp, #12
    1798:	4b46      	ldr	r3, [pc, #280]	; (18b4 <_usb_d_dev_ep_trans+0x204>)
    179a:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    179c:	00a3      	lsls	r3, r4, #2
    179e:	191b      	adds	r3, r3, r4
    17a0:	009a      	lsls	r2, r3, #2
    17a2:	4b40      	ldr	r3, [pc, #256]	; (18a4 <_usb_d_dev_ep_trans+0x1f4>)
    17a4:	189b      	adds	r3, r3, r2
    17a6:	3380      	adds	r3, #128	; 0x80
    17a8:	79db      	ldrb	r3, [r3, #7]
    17aa:	065b      	lsls	r3, r3, #25
    17ac:	d444      	bmi.n	1838 <_usb_d_dev_ep_trans+0x188>
	ept->flags.bits.is_busy = 1;
    17ae:	00a3      	lsls	r3, r4, #2
    17b0:	191b      	adds	r3, r3, r4
    17b2:	009b      	lsls	r3, r3, #2
    17b4:	4a3b      	ldr	r2, [pc, #236]	; (18a4 <_usb_d_dev_ep_trans+0x1f4>)
    17b6:	4693      	mov	fp, r2
    17b8:	449b      	add	fp, r3
    17ba:	2380      	movs	r3, #128	; 0x80
    17bc:	445b      	add	r3, fp
    17be:	469a      	mov	sl, r3
    17c0:	79db      	ldrb	r3, [r3, #7]
    17c2:	2240      	movs	r2, #64	; 0x40
    17c4:	4313      	orrs	r3, r2
    17c6:	4652      	mov	r2, sl
    17c8:	71d3      	strb	r3, [r2, #7]
	atomic_leave_critical(&flags);
    17ca:	a803      	add	r0, sp, #12
    17cc:	4b3a      	ldr	r3, [pc, #232]	; (18b8 <_usb_d_dev_ep_trans+0x208>)
    17ce:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    17d0:	465b      	mov	r3, fp
    17d2:	4642      	mov	r2, r8
    17d4:	6812      	ldr	r2, [r2, #0]
    17d6:	675a      	str	r2, [r3, #116]	; 0x74
	ept->trans_size  = trans->size;
    17d8:	4642      	mov	r2, r8
    17da:	6852      	ldr	r2, [r2, #4]
    17dc:	679a      	str	r2, [r3, #120]	; 0x78
	ept->trans_count = 0;
    17de:	2300      	movs	r3, #0
    17e0:	465a      	mov	r2, fp
    17e2:	67d3      	str	r3, [r2, #124]	; 0x7c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    17e4:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    17e6:	01d2      	lsls	r2, r2, #7
    17e8:	4653      	mov	r3, sl
    17ea:	79d9      	ldrb	r1, [r3, #7]
    17ec:	237f      	movs	r3, #127	; 0x7f
    17ee:	400b      	ands	r3, r1
	ept->flags.bits.use_cache = use_cache;
    17f0:	4649      	mov	r1, r9
    17f2:	0149      	lsls	r1, r1, #5
    17f4:	4313      	orrs	r3, r2
    17f6:	2220      	movs	r2, #32
    17f8:	4393      	bics	r3, r2
    17fa:	430b      	orrs	r3, r1
    17fc:	4652      	mov	r2, sl
    17fe:	71d3      	strb	r3, [r2, #7]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    1800:	4643      	mov	r3, r8
    1802:	7a5b      	ldrb	r3, [r3, #9]
    1804:	2200      	movs	r2, #0
    1806:	2b00      	cmp	r3, #0
    1808:	d002      	beq.n	1810 <_usb_d_dev_ep_trans+0x160>
    180a:	427a      	negs	r2, r7
    180c:	417a      	adcs	r2, r7
    180e:	b2d2      	uxtb	r2, r2
    1810:	00a3      	lsls	r3, r4, #2
    1812:	191c      	adds	r4, r3, r4
    1814:	00a4      	lsls	r4, r4, #2
    1816:	4b23      	ldr	r3, [pc, #140]	; (18a4 <_usb_d_dev_ep_trans+0x1f4>)
    1818:	191b      	adds	r3, r3, r4
    181a:	3380      	adds	r3, #128	; 0x80
    181c:	0112      	lsls	r2, r2, #4
    181e:	79df      	ldrb	r7, [r3, #7]
    1820:	2110      	movs	r1, #16
    1822:	438f      	bics	r7, r1
    1824:	4317      	orrs	r7, r2
    1826:	71df      	strb	r7, [r3, #7]
	if (dir) {
    1828:	2e00      	cmp	r6, #0
    182a:	db0a      	blt.n	1842 <_usb_d_dev_ep_trans+0x192>
		_usb_d_dev_out_next(ept, false);
    182c:	2100      	movs	r1, #0
    182e:	0028      	movs	r0, r5
    1830:	4b22      	ldr	r3, [pc, #136]	; (18bc <_usb_d_dev_ep_trans+0x20c>)
    1832:	4798      	blx	r3
	return ERR_NONE;
    1834:	2000      	movs	r0, #0
    1836:	e7a1      	b.n	177c <_usb_d_dev_ep_trans+0xcc>
		atomic_leave_critical(&flags);
    1838:	a803      	add	r0, sp, #12
    183a:	4b1f      	ldr	r3, [pc, #124]	; (18b8 <_usb_d_dev_ep_trans+0x208>)
    183c:	4798      	blx	r3
		return USB_BUSY;
    183e:	2001      	movs	r0, #1
    1840:	e79c      	b.n	177c <_usb_d_dev_ep_trans+0xcc>
		_usb_d_dev_in_next(ept, false);
    1842:	2100      	movs	r1, #0
    1844:	0028      	movs	r0, r5
    1846:	4b1e      	ldr	r3, [pc, #120]	; (18c0 <_usb_d_dev_ep_trans+0x210>)
    1848:	4798      	blx	r3
	return ERR_NONE;
    184a:	2000      	movs	r0, #0
    184c:	e796      	b.n	177c <_usb_d_dev_ep_trans+0xcc>
		return -USB_ERR_PARAM;
    184e:	2012      	movs	r0, #18
    1850:	4240      	negs	r0, r0
    1852:	e793      	b.n	177c <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_FUNC;
    1854:	2013      	movs	r0, #19
    1856:	4240      	negs	r0, r0
    1858:	e790      	b.n	177c <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_PARAM;
    185a:	2012      	movs	r0, #18
    185c:	4240      	negs	r0, r0
    185e:	e78d      	b.n	177c <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_FUNC;
    1860:	2013      	movs	r0, #19
    1862:	4240      	negs	r0, r0
    1864:	e78a      	b.n	177c <_usb_d_dev_ep_trans+0xcc>
	bool     size_n_aligned = (trans->size & size_mask);
    1866:	4643      	mov	r3, r8
    1868:	685a      	ldr	r2, [r3, #4]
    186a:	0597      	lsls	r7, r2, #22
    186c:	0dbf      	lsrs	r7, r7, #22
	return &dev_inst.ep[ep_index];
    186e:	4d0d      	ldr	r5, [pc, #52]	; (18a4 <_usb_d_dev_ep_trans+0x1f4>)
    1870:	3574      	adds	r5, #116	; 0x74
    1872:	2400      	movs	r4, #0
    1874:	e746      	b.n	1704 <_usb_d_dev_ep_trans+0x54>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1876:	4a0b      	ldr	r2, [pc, #44]	; (18a4 <_usb_d_dev_ep_trans+0x1f4>)
    1878:	3260      	adds	r2, #96	; 0x60
    187a:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    187c:	4a0a      	ldr	r2, [pc, #40]	; (18a8 <_usb_d_dev_ep_trans+0x1f8>)
    187e:	4291      	cmp	r1, r2
    1880:	d0f1      	beq.n	1866 <_usb_d_dev_ep_trans+0x1b6>
	return &dev_inst.ep[ep_index];
    1882:	4d08      	ldr	r5, [pc, #32]	; (18a4 <_usb_d_dev_ep_trans+0x1f4>)
    1884:	3574      	adds	r5, #116	; 0x74
    1886:	2400      	movs	r4, #0
    1888:	e734      	b.n	16f4 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    188a:	00a3      	lsls	r3, r4, #2
    188c:	191b      	adds	r3, r3, r4
    188e:	009a      	lsls	r2, r3, #2
    1890:	4b04      	ldr	r3, [pc, #16]	; (18a4 <_usb_d_dev_ep_trans+0x1f4>)
    1892:	189b      	adds	r3, r3, r2
    1894:	3380      	adds	r3, #128	; 0x80
    1896:	681b      	ldr	r3, [r3, #0]
    1898:	2b00      	cmp	r3, #0
    189a:	d0e1      	beq.n	1860 <_usb_d_dev_ep_trans+0x1b0>
    189c:	2301      	movs	r3, #1
    189e:	4699      	mov	r9, r3
    18a0:	e762      	b.n	1768 <_usb_d_dev_ep_trans+0xb8>
    18a2:	46c0      	nop			; (mov r8, r8)
    18a4:	200000a0 	.word	0x200000a0
    18a8:	000003ff 	.word	0x000003ff
    18ac:	1fffffff 	.word	0x1fffffff
    18b0:	20007fff 	.word	0x20007fff
    18b4:	00000439 	.word	0x00000439
    18b8:	00000447 	.word	0x00000447
    18bc:	000011cd 	.word	0x000011cd
    18c0:	00001025 	.word	0x00001025

000018c4 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    18c4:	1e0b      	subs	r3, r1, #0
    18c6:	d008      	beq.n	18da <_usb_d_dev_register_ep_callback+0x16>
	if (type == USB_D_DEV_EP_CB_SETUP) {
    18c8:	2800      	cmp	r0, #0
    18ca:	d008      	beq.n	18de <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    18cc:	2801      	cmp	r0, #1
    18ce:	d009      	beq.n	18e4 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    18d0:	2802      	cmp	r0, #2
    18d2:	d106      	bne.n	18e2 <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    18d4:	4a05      	ldr	r2, [pc, #20]	; (18ec <_usb_d_dev_register_ep_callback+0x28>)
    18d6:	6713      	str	r3, [r2, #112]	; 0x70
	}
}
    18d8:	e003      	b.n	18e2 <_usb_d_dev_register_ep_callback+0x1e>
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    18da:	4b05      	ldr	r3, [pc, #20]	; (18f0 <_usb_d_dev_register_ep_callback+0x2c>)
    18dc:	e7f4      	b.n	18c8 <_usb_d_dev_register_ep_callback+0x4>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    18de:	4a03      	ldr	r2, [pc, #12]	; (18ec <_usb_d_dev_register_ep_callback+0x28>)
    18e0:	6693      	str	r3, [r2, #104]	; 0x68
}
    18e2:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    18e4:	4a01      	ldr	r2, [pc, #4]	; (18ec <_usb_d_dev_register_ep_callback+0x28>)
    18e6:	66d3      	str	r3, [r2, #108]	; 0x6c
    18e8:	e7fb      	b.n	18e2 <_usb_d_dev_register_ep_callback+0x1e>
    18ea:	46c0      	nop			; (mov r8, r8)
    18ec:	200000a0 	.word	0x200000a0
    18f0:	00000d8d 	.word	0x00000d8d

000018f4 <USB_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_Handler(void)
{
    18f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    18f6:	4b82      	ldr	r3, [pc, #520]	; (1b00 <USB_Handler+0x20c>)
    18f8:	8c1e      	ldrh	r6, [r3, #32]
    18fa:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    18fc:	2e00      	cmp	r6, #0
    18fe:	d003      	beq.n	1908 <USB_Handler+0x14>
    1900:	4c80      	ldr	r4, [pc, #512]	; (1b04 <USB_Handler+0x210>)
    1902:	3474      	adds	r4, #116	; 0x74
	uint32_t lpm_variable = 0;
    1904:	2500      	movs	r5, #0
    1906:	e0b9      	b.n	1a7c <USB_Handler+0x188>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    1908:	8b99      	ldrh	r1, [r3, #28]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    190a:	8b1b      	ldrh	r3, [r3, #24]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    190c:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    190e:	075a      	lsls	r2, r3, #29
    1910:	d417      	bmi.n	1942 <USB_Handler+0x4e>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    1912:	059a      	lsls	r2, r3, #22
    1914:	d41c      	bmi.n	1950 <USB_Handler+0x5c>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    1916:	061a      	lsls	r2, r3, #24
    1918:	d43e      	bmi.n	1998 <USB_Handler+0xa4>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    191a:	2270      	movs	r2, #112	; 0x70
    191c:	421a      	tst	r2, r3
    191e:	d144      	bne.n	19aa <USB_Handler+0xb6>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    1920:	071a      	lsls	r2, r3, #28
    1922:	d45e      	bmi.n	19e2 <USB_Handler+0xee>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    1924:	07db      	lsls	r3, r3, #31
    1926:	d5eb      	bpl.n	1900 <USB_Handler+0xc>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1928:	4b75      	ldr	r3, [pc, #468]	; (1b00 <USB_Handler+0x20c>)
    192a:	4a77      	ldr	r2, [pc, #476]	; (1b08 <USB_Handler+0x214>)
    192c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    192e:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1930:	3a92      	subs	r2, #146	; 0x92
    1932:	3aff      	subs	r2, #255	; 0xff
    1934:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    1936:	4b73      	ldr	r3, [pc, #460]	; (1b04 <USB_Handler+0x210>)
    1938:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    193a:	2100      	movs	r1, #0
    193c:	2004      	movs	r0, #4
    193e:	4798      	blx	r3
    1940:	e005      	b.n	194e <USB_Handler+0x5a>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1942:	2204      	movs	r2, #4
    1944:	4b6e      	ldr	r3, [pc, #440]	; (1b00 <USB_Handler+0x20c>)
    1946:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    1948:	4b6e      	ldr	r3, [pc, #440]	; (1b04 <USB_Handler+0x210>)
    194a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    194c:	4798      	blx	r3

	_usb_d_dev_handler();
}
    194e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1950:	4b6b      	ldr	r3, [pc, #428]	; (1b00 <USB_Handler+0x20c>)
    1952:	4a6d      	ldr	r2, [pc, #436]	; (1b08 <USB_Handler+0x214>)
    1954:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1956:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1958:	3a92      	subs	r2, #146	; 0x92
    195a:	3aff      	subs	r2, #255	; 0xff
    195c:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    195e:	4b69      	ldr	r3, [pc, #420]	; (1b04 <USB_Handler+0x210>)
    1960:	891b      	ldrh	r3, [r3, #8]
    1962:	071b      	lsls	r3, r3, #28
    1964:	0f1b      	lsrs	r3, r3, #28
    1966:	2b03      	cmp	r3, #3
    1968:	d00c      	beq.n	1984 <USB_Handler+0x90>
    196a:	4b66      	ldr	r3, [pc, #408]	; (1b04 <USB_Handler+0x210>)
    196c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    196e:	071b      	lsls	r3, r3, #28
    1970:	0f1b      	lsrs	r3, r3, #28
	uint32_t lpm_variable = 0;
    1972:	2100      	movs	r1, #0
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    1974:	3a6f      	subs	r2, #111	; 0x6f
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    1976:	2b03      	cmp	r3, #3
    1978:	d005      	beq.n	1986 <USB_Handler+0x92>
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    197a:	4b62      	ldr	r3, [pc, #392]	; (1b04 <USB_Handler+0x210>)
    197c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    197e:	2003      	movs	r0, #3
    1980:	4798      	blx	r3
    1982:	e7e4      	b.n	194e <USB_Handler+0x5a>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    1984:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    1986:	0152      	lsls	r2, r2, #5
    1988:	4b5e      	ldr	r3, [pc, #376]	; (1b04 <USB_Handler+0x210>)
    198a:	189b      	adds	r3, r3, r2
    198c:	8919      	ldrh	r1, [r3, #8]
    198e:	0449      	lsls	r1, r1, #17
    1990:	0d49      	lsrs	r1, r1, #21
			bank->EXTREG.reg = 0;
    1992:	2200      	movs	r2, #0
    1994:	811a      	strh	r2, [r3, #8]
    1996:	e7f0      	b.n	197a <USB_Handler+0x86>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1998:	2280      	movs	r2, #128	; 0x80
    199a:	4b59      	ldr	r3, [pc, #356]	; (1b00 <USB_Handler+0x20c>)
    199c:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    199e:	4b59      	ldr	r3, [pc, #356]	; (1b04 <USB_Handler+0x210>)
    19a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    19a2:	2100      	movs	r1, #0
    19a4:	2005      	movs	r0, #5
    19a6:	4798      	blx	r3
    19a8:	e7d1      	b.n	194e <USB_Handler+0x5a>
    19aa:	4b55      	ldr	r3, [pc, #340]	; (1b00 <USB_Handler+0x20c>)
    19ac:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    19ae:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    19b0:	4a55      	ldr	r2, [pc, #340]	; (1b08 <USB_Handler+0x214>)
    19b2:	831a      	strh	r2, [r3, #24]
	if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    19b4:	4b55      	ldr	r3, [pc, #340]	; (1b0c <USB_Handler+0x218>)
    19b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    19b8:	069b      	lsls	r3, r3, #26
    19ba:	d40c      	bmi.n	19d6 <USB_Handler+0xe2>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    19bc:	4953      	ldr	r1, [pc, #332]	; (1b0c <USB_Handler+0x218>)
	tmp &= mask;
    19be:	3a32      	subs	r2, #50	; 0x32
    19c0:	3aff      	subs	r2, #255	; 0xff
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    19c2:	68cb      	ldr	r3, [r1, #12]
	tmp &= mask;
    19c4:	4013      	ands	r3, r2
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, DFLL_READY_FLAG) != DFLL_READY_FLAG)
    19c6:	2bd0      	cmp	r3, #208	; 0xd0
    19c8:	d1fb      	bne.n	19c2 <USB_Handler+0xce>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    19ca:	4b4e      	ldr	r3, [pc, #312]	; (1b04 <USB_Handler+0x210>)
    19cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    19ce:	2100      	movs	r1, #0
    19d0:	2002      	movs	r0, #2
    19d2:	4798      	blx	r3
    19d4:	e7bb      	b.n	194e <USB_Handler+0x5a>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    19d6:	494d      	ldr	r1, [pc, #308]	; (1b0c <USB_Handler+0x218>)
	tmp &= mask;
    19d8:	2210      	movs	r2, #16
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    19da:	68cb      	ldr	r3, [r1, #12]
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY)
    19dc:	421a      	tst	r2, r3
    19de:	d0fc      	beq.n	19da <USB_Handler+0xe6>
    19e0:	e7f3      	b.n	19ca <USB_Handler+0xd6>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    19e2:	4b47      	ldr	r3, [pc, #284]	; (1b00 <USB_Handler+0x20c>)
    19e4:	2100      	movs	r1, #0
    19e6:	2280      	movs	r2, #128	; 0x80
    19e8:	0052      	lsls	r2, r2, #1
    19ea:	5499      	strb	r1, [r3, r2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    19ec:	3af8      	subs	r2, #248	; 0xf8
    19ee:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    19f0:	3268      	adds	r2, #104	; 0x68
    19f2:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    19f4:	4a44      	ldr	r2, [pc, #272]	; (1b08 <USB_Handler+0x214>)
    19f6:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    19f8:	4b45      	ldr	r3, [pc, #276]	; (1b10 <USB_Handler+0x21c>)
    19fa:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    19fc:	4b41      	ldr	r3, [pc, #260]	; (1b04 <USB_Handler+0x210>)
    19fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1a00:	2100      	movs	r1, #0
    1a02:	2001      	movs	r0, #1
    1a04:	4798      	blx	r3
    1a06:	e7a2      	b.n	194e <USB_Handler+0x5a>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1a08:	06cb      	lsls	r3, r1, #27
    1a0a:	d407      	bmi.n	1a1c <USB_Handler+0x128>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    1a0c:	064b      	lsls	r3, r1, #25
    1a0e:	d408      	bmi.n	1a22 <USB_Handler+0x12e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    1a10:	068b      	lsls	r3, r1, #26
    1a12:	d52e      	bpl.n	1a72 <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 0);
    1a14:	2100      	movs	r1, #0
    1a16:	4b3f      	ldr	r3, [pc, #252]	; (1b14 <USB_Handler+0x220>)
    1a18:	4798      	blx	r3
    1a1a:	e02a      	b.n	1a72 <USB_Handler+0x17e>
		_usb_d_dev_handle_setup(ept);
    1a1c:	4b3e      	ldr	r3, [pc, #248]	; (1b18 <USB_Handler+0x224>)
    1a1e:	4798      	blx	r3
    1a20:	e027      	b.n	1a72 <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 1);
    1a22:	2101      	movs	r1, #1
    1a24:	4b3b      	ldr	r3, [pc, #236]	; (1b14 <USB_Handler+0x220>)
    1a26:	4798      	blx	r3
    1a28:	e023      	b.n	1a72 <USB_Handler+0x17e>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    1a2a:	064b      	lsls	r3, r1, #25
    1a2c:	d40e      	bmi.n	1a4c <USB_Handler+0x158>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    1a2e:	070b      	lsls	r3, r1, #28
    1a30:	d410      	bmi.n	1a54 <USB_Handler+0x160>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    1a32:	078b      	lsls	r3, r1, #30
    1a34:	d412      	bmi.n	1a5c <USB_Handler+0x168>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    1a36:	2307      	movs	r3, #7
    1a38:	401a      	ands	r2, r3
    1a3a:	2a01      	cmp	r2, #1
    1a3c:	d119      	bne.n	1a72 <USB_Handler+0x17e>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    1a3e:	074b      	lsls	r3, r1, #29
    1a40:	d410      	bmi.n	1a64 <USB_Handler+0x170>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1a42:	06cb      	lsls	r3, r1, #27
    1a44:	d515      	bpl.n	1a72 <USB_Handler+0x17e>
			_usb_d_dev_handle_setup(ept);
    1a46:	4b34      	ldr	r3, [pc, #208]	; (1b18 <USB_Handler+0x224>)
    1a48:	4798      	blx	r3
    1a4a:	e012      	b.n	1a72 <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 1);
    1a4c:	2101      	movs	r1, #1
    1a4e:	4b31      	ldr	r3, [pc, #196]	; (1b14 <USB_Handler+0x220>)
    1a50:	4798      	blx	r3
    1a52:	e00e      	b.n	1a72 <USB_Handler+0x17e>
		_usb_d_dev_handle_trfail(ept, 1);
    1a54:	2101      	movs	r1, #1
    1a56:	4b31      	ldr	r3, [pc, #196]	; (1b1c <USB_Handler+0x228>)
    1a58:	4798      	blx	r3
    1a5a:	e00a      	b.n	1a72 <USB_Handler+0x17e>
		_usb_d_dev_in_next(ept, true);
    1a5c:	2101      	movs	r1, #1
    1a5e:	4b30      	ldr	r3, [pc, #192]	; (1b20 <USB_Handler+0x22c>)
    1a60:	4798      	blx	r3
    1a62:	e006      	b.n	1a72 <USB_Handler+0x17e>
			_usb_d_dev_handle_trfail(ept, 0);
    1a64:	2100      	movs	r1, #0
    1a66:	4b2d      	ldr	r3, [pc, #180]	; (1b1c <USB_Handler+0x228>)
    1a68:	4798      	blx	r3
    1a6a:	e002      	b.n	1a72 <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 0);
    1a6c:	2100      	movs	r1, #0
    1a6e:	4b29      	ldr	r3, [pc, #164]	; (1b14 <USB_Handler+0x220>)
    1a70:	4798      	blx	r3
    1a72:	3501      	adds	r5, #1
    1a74:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    1a76:	2d09      	cmp	r5, #9
    1a78:	d100      	bne.n	1a7c <USB_Handler+0x188>
    1a7a:	e768      	b.n	194e <USB_Handler+0x5a>
    1a7c:	0020      	movs	r0, r4
		if (ept->ep == 0xFF) {
    1a7e:	7ca1      	ldrb	r1, [r4, #18]
    1a80:	29ff      	cmp	r1, #255	; 0xff
    1a82:	d0f6      	beq.n	1a72 <USB_Handler+0x17e>
	if (!(epint & (1u << epn))) {
    1a84:	230f      	movs	r3, #15
    1a86:	400b      	ands	r3, r1
    1a88:	2101      	movs	r1, #1
    1a8a:	4099      	lsls	r1, r3
    1a8c:	420e      	tst	r6, r1
    1a8e:	d0f0      	beq.n	1a72 <USB_Handler+0x17e>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    1a90:	0159      	lsls	r1, r3, #5
    1a92:	4f24      	ldr	r7, [pc, #144]	; (1b24 <USB_Handler+0x230>)
    1a94:	46bc      	mov	ip, r7
    1a96:	4461      	add	r1, ip
    1a98:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    1a9a:	015b      	lsls	r3, r3, #5
    1a9c:	4f22      	ldr	r7, [pc, #136]	; (1b28 <USB_Handler+0x234>)
    1a9e:	46bc      	mov	ip, r7
    1aa0:	4463      	add	r3, ip
    1aa2:	781b      	ldrb	r3, [r3, #0]
	flags &= mask;
    1aa4:	4019      	ands	r1, r3
	if (flags) {
    1aa6:	d0e4      	beq.n	1a72 <USB_Handler+0x17e>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    1aa8:	00ab      	lsls	r3, r5, #2
    1aaa:	195a      	adds	r2, r3, r5
    1aac:	0092      	lsls	r2, r2, #2
    1aae:	4b15      	ldr	r3, [pc, #84]	; (1b04 <USB_Handler+0x210>)
    1ab0:	469c      	mov	ip, r3
    1ab2:	4462      	add	r2, ip
    1ab4:	3270      	adds	r2, #112	; 0x70
    1ab6:	7dd2      	ldrb	r2, [r2, #23]
    1ab8:	2347      	movs	r3, #71	; 0x47
    1aba:	4013      	ands	r3, r2
    1abc:	2b01      	cmp	r3, #1
    1abe:	d0a3      	beq.n	1a08 <USB_Handler+0x114>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    1ac0:	b253      	sxtb	r3, r2
    1ac2:	2b00      	cmp	r3, #0
    1ac4:	dbb1      	blt.n	1a2a <USB_Handler+0x136>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    1ac6:	068b      	lsls	r3, r1, #26
    1ac8:	d4d0      	bmi.n	1a6c <USB_Handler+0x178>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    1aca:	074b      	lsls	r3, r1, #29
    1acc:	d40c      	bmi.n	1ae8 <USB_Handler+0x1f4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    1ace:	07cb      	lsls	r3, r1, #31
    1ad0:	d40e      	bmi.n	1af0 <USB_Handler+0x1fc>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    1ad2:	2307      	movs	r3, #7
    1ad4:	401a      	ands	r2, r3
    1ad6:	2a01      	cmp	r2, #1
    1ad8:	d1cb      	bne.n	1a72 <USB_Handler+0x17e>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    1ada:	070b      	lsls	r3, r1, #28
    1adc:	d40c      	bmi.n	1af8 <USB_Handler+0x204>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1ade:	06cb      	lsls	r3, r1, #27
    1ae0:	d5c7      	bpl.n	1a72 <USB_Handler+0x17e>
			_usb_d_dev_handle_setup(ept);
    1ae2:	4b0d      	ldr	r3, [pc, #52]	; (1b18 <USB_Handler+0x224>)
    1ae4:	4798      	blx	r3
    1ae6:	e7c4      	b.n	1a72 <USB_Handler+0x17e>
		_usb_d_dev_handle_trfail(ept, 0);
    1ae8:	2100      	movs	r1, #0
    1aea:	4b0c      	ldr	r3, [pc, #48]	; (1b1c <USB_Handler+0x228>)
    1aec:	4798      	blx	r3
    1aee:	e7c0      	b.n	1a72 <USB_Handler+0x17e>
		_usb_d_dev_out_next(ept, true);
    1af0:	2101      	movs	r1, #1
    1af2:	4b0e      	ldr	r3, [pc, #56]	; (1b2c <USB_Handler+0x238>)
    1af4:	4798      	blx	r3
    1af6:	e7bc      	b.n	1a72 <USB_Handler+0x17e>
			_usb_d_dev_handle_trfail(ept, 1);
    1af8:	2101      	movs	r1, #1
    1afa:	4b08      	ldr	r3, [pc, #32]	; (1b1c <USB_Handler+0x228>)
    1afc:	4798      	blx	r3
    1afe:	e7b8      	b.n	1a72 <USB_Handler+0x17e>
    1b00:	41005000 	.word	0x41005000
    1b04:	200000a0 	.word	0x200000a0
    1b08:	00000201 	.word	0x00000201
    1b0c:	40000800 	.word	0x40000800
    1b10:	00000fe1 	.word	0x00000fe1
    1b14:	00000e1d 	.word	0x00000e1d
    1b18:	00000d91 	.word	0x00000d91
    1b1c:	00000ee1 	.word	0x00000ee1
    1b20:	00001025 	.word	0x00001025
    1b24:	41005100 	.word	0x41005100
    1b28:	41005109 	.word	0x41005109
    1b2c:	000011cd 	.word	0x000011cd

00001b30 <main>:
#include <atmel_start.h>

int main(void)
{
    1b30:	b510      	push	{r4, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    1b32:	4b01      	ldr	r3, [pc, #4]	; (1b38 <main+0x8>)
    1b34:	4798      	blx	r3
    1b36:	e7fe      	b.n	1b36 <main+0x6>
    1b38:	00000115 	.word	0x00000115

00001b3c <__libc_init_array>:
    1b3c:	b570      	push	{r4, r5, r6, lr}
    1b3e:	2600      	movs	r6, #0
    1b40:	4d0c      	ldr	r5, [pc, #48]	; (1b74 <__libc_init_array+0x38>)
    1b42:	4c0d      	ldr	r4, [pc, #52]	; (1b78 <__libc_init_array+0x3c>)
    1b44:	1b64      	subs	r4, r4, r5
    1b46:	10a4      	asrs	r4, r4, #2
    1b48:	42a6      	cmp	r6, r4
    1b4a:	d109      	bne.n	1b60 <__libc_init_array+0x24>
    1b4c:	2600      	movs	r6, #0
    1b4e:	f000 f899 	bl	1c84 <_init>
    1b52:	4d0a      	ldr	r5, [pc, #40]	; (1b7c <__libc_init_array+0x40>)
    1b54:	4c0a      	ldr	r4, [pc, #40]	; (1b80 <__libc_init_array+0x44>)
    1b56:	1b64      	subs	r4, r4, r5
    1b58:	10a4      	asrs	r4, r4, #2
    1b5a:	42a6      	cmp	r6, r4
    1b5c:	d105      	bne.n	1b6a <__libc_init_array+0x2e>
    1b5e:	bd70      	pop	{r4, r5, r6, pc}
    1b60:	00b3      	lsls	r3, r6, #2
    1b62:	58eb      	ldr	r3, [r5, r3]
    1b64:	4798      	blx	r3
    1b66:	3601      	adds	r6, #1
    1b68:	e7ee      	b.n	1b48 <__libc_init_array+0xc>
    1b6a:	00b3      	lsls	r3, r6, #2
    1b6c:	58eb      	ldr	r3, [r5, r3]
    1b6e:	4798      	blx	r3
    1b70:	3601      	adds	r6, #1
    1b72:	e7f2      	b.n	1b5a <__libc_init_array+0x1e>
    1b74:	00001c90 	.word	0x00001c90
    1b78:	00001c90 	.word	0x00001c90
    1b7c:	00001c90 	.word	0x00001c90
    1b80:	00001c94 	.word	0x00001c94

00001b84 <memcpy>:
    1b84:	2300      	movs	r3, #0
    1b86:	b510      	push	{r4, lr}
    1b88:	429a      	cmp	r2, r3
    1b8a:	d100      	bne.n	1b8e <memcpy+0xa>
    1b8c:	bd10      	pop	{r4, pc}
    1b8e:	5ccc      	ldrb	r4, [r1, r3]
    1b90:	54c4      	strb	r4, [r0, r3]
    1b92:	3301      	adds	r3, #1
    1b94:	e7f8      	b.n	1b88 <memcpy+0x4>

00001b96 <memset>:
    1b96:	0003      	movs	r3, r0
    1b98:	1882      	adds	r2, r0, r2
    1b9a:	4293      	cmp	r3, r2
    1b9c:	d100      	bne.n	1ba0 <memset+0xa>
    1b9e:	4770      	bx	lr
    1ba0:	7019      	strb	r1, [r3, #0]
    1ba2:	3301      	adds	r3, #1
    1ba4:	e7f9      	b.n	1b9a <memset+0x4>
    1ba6:	0000      	movs	r0, r0
    1ba8:	682f2e2e 	.word	0x682f2e2e
    1bac:	732f6c61 	.word	0x732f6c61
    1bb0:	682f6372 	.word	0x682f6372
    1bb4:	615f6c61 	.word	0x615f6c61
    1bb8:	735f6364 	.word	0x735f6364
    1bbc:	2e636e79 	.word	0x2e636e79
    1bc0:	00000063 	.word	0x00000063
    1bc4:	682f2e2e 	.word	0x682f2e2e
    1bc8:	732f6c61 	.word	0x732f6c61
    1bcc:	682f6372 	.word	0x682f6372
    1bd0:	745f6c61 	.word	0x745f6c61
    1bd4:	72656d69 	.word	0x72656d69
    1bd8:	0000632e 	.word	0x0000632e
    1bdc:	682f2e2e 	.word	0x682f2e2e
    1be0:	732f6c61 	.word	0x732f6c61
    1be4:	682f6372 	.word	0x682f6372
    1be8:	755f6c61 	.word	0x755f6c61
    1bec:	74726173 	.word	0x74726173
    1bf0:	6e79735f 	.word	0x6e79735f
    1bf4:	00632e63 	.word	0x00632e63
    1bf8:	682f2e2e 	.word	0x682f2e2e
    1bfc:	752f6c61 	.word	0x752f6c61
    1c00:	736c6974 	.word	0x736c6974
    1c04:	6372732f 	.word	0x6372732f
    1c08:	6974752f 	.word	0x6974752f
    1c0c:	6c5f736c 	.word	0x6c5f736c
    1c10:	2e747369 	.word	0x2e747369
    1c14:	00000063 	.word	0x00000063

00001c18 <_adcs>:
    1c18:	00000200 00000000 00000000 00000000     ................
	...
    1c34:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    1c44:	632e6364 00000000 682f2e2e 722f6c70     dc.c....../hpl/r
    1c54:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
    1c64:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    1c74:	65735f6c 6d6f6372 0000632e 00002000     l_sercom.c... ..

00001c84 <_init>:
    1c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c86:	46c0      	nop			; (mov r8, r8)
    1c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1c8a:	bc08      	pop	{r3}
    1c8c:	469e      	mov	lr, r3
    1c8e:	4770      	bx	lr

00001c90 <__init_array_start>:
    1c90:	000000dd 	.word	0x000000dd

00001c94 <_fini>:
    1c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c96:	46c0      	nop			; (mov r8, r8)
    1c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1c9a:	bc08      	pop	{r3}
    1c9c:	469e      	mov	lr, r3
    1c9e:	4770      	bx	lr

00001ca0 <__fini_array_start>:
    1ca0:	000000b5 	.word	0x000000b5
